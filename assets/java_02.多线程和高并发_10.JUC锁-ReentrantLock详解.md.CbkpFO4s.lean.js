import{_ as a,c as n,m as e,a as r,o}from"./chunks/framework.Bpx1IrZ-.js";const c="/blog/assets/7901bf6447bb46639e76d26635e5b9bb.DXjiiypn.png",h=JSON.parse('{"title":"10.JUC锁-ReentrantLock详解","description":"","frontmatter":{"title":"10.JUC锁-ReentrantLock详解","tags":["java","多线程"],"categories":["java","多线程"]},"headers":[],"relativePath":"java/02.多线程和高并发/10.JUC锁-ReentrantLock详解.md","filePath":"java/02.多线程和高并发/10.JUC锁-ReentrantLock详解.md","lastUpdated":1737015883000}'),l={name:"java/02.多线程和高并发/10.JUC锁-ReentrantLock详解.md"};function s(i,t,p,d,k,_){return o(),n("div",null,t[0]||(t[0]=[e("h2",{id:"reentrantlock特性",tabindex:"-1"},[r("ReentrantLock特性 "),e("a",{class:"header-anchor",href:"#reentrantlock特性","aria-label":'Permalink to "ReentrantLock特性"'},"​")],-1),e("p",null,"ReentrantLock意思为可重入锁，指的是一个线程能够对一个临界资源重复加锁。为了帮助大家更好地理解ReentrantLock的特性， 我们先将ReentrantLock跟常用的Synchronized进行比较，其特性如下（蓝色部分为本篇文章主要剖析的点）：",-1),e("p",null,[e("img",{src:c,alt:"ReentrantLock和Synchronize比较"})],-1),e("p",null,"参考文档：",-1),e("ul",null,[e("li",null,[e("a",{href:"https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html",target:"_blank",rel:"noreferrer"},"从ReentrantLock的实现看AQS的原理及应用")])],-1)]))}const L=a(l,[["render",s]]);export{h as __pageData,L as default};
