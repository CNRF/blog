import{_ as i,c as a,o as n,a3 as t}from"./chunks/framework.Dohe277V.js";const e="/blog/assets/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%9B%BE%E8%A7%A3.BjgEXI7l.png",l="/blog/assets/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%8E%9F%E7%90%86.Ck8dUPdr.png",E=JSON.parse('{"title":"02.基础类型","description":"","frontmatter":{"title":"02.基础类型","tags":["java"],"categories":["java"]},"headers":[],"relativePath":"java/01.java基础/02.基础类型.md","filePath":"java/01.java基础/02.基础类型.md","lastUpdated":1742456220000}'),h={name:"java/01.java基础/02.基础类型.md"};function p(r,s,k,d,c,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="常量和变量" tabindex="-1">常量和变量 <a class="header-anchor" href="#常量和变量" aria-label="Permalink to &quot;常量和变量&quot;">​</a></h2><h3 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h3><h4 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h4><p><strong>常量：是指在Java程序中固定不变的数据。</strong></p><h4 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h4><table><thead><tr><th>类型</th><th>含义</th><th>数据举例</th></tr></thead><tbody><tr><td>整数常量</td><td>所有的整数</td><td>0，1， 567， -9</td></tr><tr><td>小数常量</td><td>所有的小数</td><td>0.0， -0.1， 2.55</td></tr><tr><td>字符常量</td><td>单引号引起来,只能写一个字符,必须有内容</td><td>&#39;a&#39; ， &#39; &#39;， &#39;好&#39;</td></tr><tr><td>字符串常量</td><td>双引号引起来,可以写多个字符,也可以不写</td><td>&quot;A&quot; ，&quot;Hello&quot; ，&quot;你好&quot; ，&quot;&quot;</td></tr><tr><td>布尔常量</td><td>只有两个值</td><td>true ， false</td></tr><tr><td>空常量</td><td>只有一个值</td><td>null</td></tr></tbody></table><h3 id="变量和数据类型" tabindex="-1">变量和数据类型 <a class="header-anchor" href="#变量和数据类型" aria-label="Permalink to &quot;变量和数据类型&quot;">​</a></h3><h4 id="变量概述" tabindex="-1">变量概述 <a class="header-anchor" href="#变量概述" aria-label="Permalink to &quot;变量概述&quot;">​</a></h4><ul><li><p><strong>变量：常量是固定不变的数据，那么在程序中可以变化的量称为变量。</strong></p><blockquote><p>数学中，可以使用字母代替数字运算,例如 x=1+5 或者 6=x+5。 程序中，可以使用字母保存数字的方式进行运算，提高计算能力，可以解决更多的问题。比如x保存5，x也可 以保存6，这样x保存的数据是可以改变的，也就是我们所讲解的变量</p></blockquote></li></ul><p>Java中要求一个变量每次只能保存一个数据，必须要明确保存的数据类型。</p><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="数据类型分类" tabindex="-1">数据类型分类 <a class="header-anchor" href="#数据类型分类" aria-label="Permalink to &quot;数据类型分类&quot;">​</a></h3><ol><li>基本数据类型：整数,浮点数,字符,布尔类型</li><li><strong>引用数据类型</strong> ：包括 <code>类</code> 、 <code>数组</code> 、 <code>接口</code> 。</li></ol><table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:center;">关键字</th><th>内存占用</th><th style="text-align:center;">取值范围</th></tr></thead><tbody><tr><td style="text-align:center;">字节型</td><td style="text-align:center;">byte</td><td>1个字节</td><td style="text-align:center;">-128~127</td></tr><tr><td style="text-align:center;">短整型</td><td style="text-align:center;">short</td><td>2个字节</td><td style="text-align:center;">-32768~32767</td></tr><tr><td style="text-align:center;">整型</td><td style="text-align:center;">int（默认）</td><td>4个字节</td><td style="text-align:center;">-2的31次方~2的31次方-1</td></tr><tr><td style="text-align:center;">长整型</td><td style="text-align:center;">long</td><td>8个字节</td><td style="text-align:center;">-2的63次方~2的63次方-1</td></tr><tr><td style="text-align:center;">单精度浮点数</td><td style="text-align:center;">float</td><td>4个字节</td><td style="text-align:center;">1.4013E-45~3.4028E+38</td></tr><tr><td style="text-align:center;">双精度浮点数</td><td style="text-align:center;">double（默认）</td><td>8个字节</td><td style="text-align:center;">4.9E-324~1.7977E+308</td></tr><tr><td style="text-align:center;">字符型</td><td style="text-align:center;">char</td><td>2个字节</td><td style="text-align:center;">0-65535</td></tr><tr><td style="text-align:center;">布尔类型</td><td style="text-align:center;">boolean</td><td>1个字节</td><td style="text-align:center;">true，false</td></tr></tbody></table><blockquote><p>Java中的默认类型：整数类型是 int 、浮点类型是 double 。 通常计算机中一个字符8个字节</p></blockquote><h3 id="基本数据类型转化" tabindex="-1">基本数据类型转化 <a class="header-anchor" href="#基本数据类型转化" aria-label="Permalink to &quot;基本数据类型转化&quot;">​</a></h3><p>Java程序中要求参与的计算的数据，必须要保证数据类型的一致性，如果数据类不一致将发生类型的转换。</p><h4 id="自动转换" tabindex="-1">自动转换 <a class="header-anchor" href="#自动转换" aria-label="Permalink to &quot;自动转换&quot;">​</a></h4><p>一个 int 类型变量和一个 byte 类型变量进行加法运算， 结果会是什么数据类型？</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>运算结果，变量的类型将是 int 类型，这就是出现了数据类型的自动类型转换现象</p><ul><li><strong>自动转换</strong> ：将 <code>取值范围小的类型</code> 自动提升为 <code>取值范围大的类型</code> 。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // byte x = b + i; // 报错  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //int类型和byte类型运算，结果是int类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(j);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="转换原理图解" tabindex="-1">转换原理图解 <a class="header-anchor" href="#转换原理图解" aria-label="Permalink to &quot;转换原理图解&quot;">​</a></h4><p><code>byte</code> 类型内存占有1个字节，在和 <code>int</code> 类型运算时会提升为 <code>int</code> 类型 ，自动补充3个字节，因此计算后的结果还是 <code>int</code> 类型</p><p><img src="`+e+`" alt="数据类型转换图解"></p><p>同样道理，当一个 <code>int</code> 类型变量和一个 <code>double</code> 变量运算时， <code>int</code> 类型将会自动提升为 <code>double</code> 类型进行运算。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //int类型和double类型运算，结果是double类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //int类型会提升为double类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="转换规则" tabindex="-1">转换规则 <a class="header-anchor" href="#转换规则" aria-label="Permalink to &quot;转换规则&quot;">​</a></h3><p>范围小的类型向范围大的类型提升， <code>byte</code> 、<code>short</code>、<code>char</code> 运算时直接提升为 <code>int</code> 。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">‐‐</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">‐‐</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">‐‐</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">‐‐</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;double</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="强制转换" tabindex="-1">强制转换 <a class="header-anchor" href="#强制转换" aria-label="Permalink to &quot;强制转换&quot;">​</a></h2><p>将 1.5 赋值到 int 类型变量会发生什么？产生编译失败，肯定无法赋值</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>double</code> 类型内存<strong>8个字节</strong>， <code>int</code> 类型内存<strong>4个字节</strong>。 1.5 是 <code>double</code> 类型，取值范围大于 <code>int</code> 。</p><p>想要赋值成功，只有通过强制类型转换，将 double 类型强制转换成 int 类型才能赋值。</p><ul><li><strong>强制类型转换</strong> ：将 取值范围大的类型 强制转换成 取值范围小的类型 。</li></ul><p>比较而言，自动转换是Java自动执行的，而强制转换需要我们自己手动执行</p><p>转换格式：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>数据类型 变量名 = （数据类型）被转数据值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将 1.5 赋值到 int 类型，代码修改为：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// double类型数据强制转成int类型，直接去掉小数点。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>同样道理，当一个 <code>short</code> 类型与 <code>1</code> 相加，我们知道会类型提升，但是还想给结果赋值给<code>short</code>类型变量，就需要强制转换</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //short类型变量，内存中2个字节</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     /*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       出现编译失败</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       s和1做运算的时候，1是int类型，s会被提升为int类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       s+1后的结果是int类型，将结果在赋值会short类型时发生错误</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       short内存2个字节，int类型4个字节</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       必须将int强制转成short才能完成赋值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">；</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译失败</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//编译成功</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>转换原理图解</strong></p><p><img src="`+l+`" alt="类型转换原理"></p><p><strong>强烈注意</strong></p><ul><li>浮点转成整数，直接取消小数点，可能造成数据损失精度。</li><li>int 强制转成 short 砍掉2个字节，可能造成数据丢失。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义s为short范围内最大值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32767</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 运算后，强制转换，砍掉2个字节后会出现不确定的结果</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="ascii-编码表" tabindex="-1">ASCII 编码表 <a class="header-anchor" href="#ascii-编码表" aria-label="Permalink to &quot;ASCII 编码表&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //字符类型变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //字符类型和int类型计算</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//输出结果是98</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在计算机的内部都是二进制的0、1数据，如何让计算机可以直接识别人类文字的问题呢？就产生出了编码表的概念。</p><ul><li>编码表 ：就是将人类的文字和一个十进制数进行对应起来组成一张表格。</li></ul><p>人们就规定</p><table><thead><tr><th>字符</th><th>数值</th></tr></thead><tbody><tr><td>0</td><td>48</td></tr><tr><td>9</td><td>57</td></tr><tr><td>A</td><td>65</td></tr><tr><td>Z</td><td>90</td></tr><tr><td>a</td><td>97</td></tr><tr><td>z</td><td>122</td></tr></tbody></table><ul><li>将所有的英文字母，数字，符号都和十进制进行了对应，因此产生了世界上第一张编码表 ASCII（American Standard Code for Information Interchange 美国标准信息交换码）。</li></ul><blockquote><p>小贴士： 在char类型和int类型计算的过程中，char类型的字符先查询编码表，得到97，再和1求和，结果为98。char类型提升 为了int类型。char类型内存2个字节，int类型内存4个字节</p></blockquote>`,57)]))}const y=i(h,[["render",p]]);export{E as __pageData,y as default};
