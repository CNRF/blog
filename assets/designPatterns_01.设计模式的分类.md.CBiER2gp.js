import{_ as n,D as d,c as s,o as h,a3 as e,m as i,a,H as t,w as o}from"./chunks/framework.Dohe277V.js";const x=JSON.parse('{"title":"设计模式的6大设计原则","description":"","frontmatter":{},"headers":[],"relativePath":"designPatterns/01.设计模式的分类.md","filePath":"designPatterns/01.设计模式的分类.md","lastUpdated":1744708635000}'),u={name:"designPatterns/01.设计模式的分类.md"};function p(b,l,m,q,f,P){const r=d("font");return h(),s("div",null,[l[18]||(l[18]=e('<h1 id="设计模式的6大设计原则" tabindex="-1">设计模式的6大设计原则 <a class="header-anchor" href="#设计模式的6大设计原则" aria-label="Permalink to &quot;设计模式的6大设计原则&quot;">​</a></h1><ol><li>单一职责原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>接口隔离原则</li><li>迪米特法则</li><li>开闭原则</li></ol><h2 id="单一职责原则" tabindex="-1">单一职责原则 <a class="header-anchor" href="#单一职责原则" aria-label="Permalink to &quot;单一职责原则&quot;">​</a></h2><p>一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分。核心就是控制类的粒度大小、将对象解耦、提高其内聚性</p><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><p>1、降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。</p><p>2、提高类的可读性。复杂性降低，自然其可读性会提高。</p><p>3、提高系统的可维护性。可读性提高，那自然更容易维护了。</p><p>4、变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。</p><h2 id="里氏替换原则" tabindex="-1">里氏替换原则 <a class="header-anchor" href="#里氏替换原则" aria-label="Permalink to &quot;里氏替换原则&quot;">​</a></h2><p>继承必须确保超类所拥有的性质在子类中仍然成立。子类可以扩展父类的功能，但不能改变父类原有的功能</p><h3 id="作用-1" tabindex="-1">作用 <a class="header-anchor" href="#作用-1" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ol><li>克服了继承中重写父类造成的可复用性变差的缺点</li><li>保证了动作正确性。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。</li></ol><h3 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><p><strong>继承，除添加新的方法完成新增功能外</strong>，尽量不要重写父类的方法</p><h2 id="依赖倒置原则" tabindex="-1">依赖倒置原则 <a class="header-anchor" href="#依赖倒置原则" aria-label="Permalink to &quot;依赖倒置原则&quot;">​</a></h2>',16)),i("p",null,[l[1]||(l[1]=a("高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：")),t(r,{color:"red"},{default:o(()=>l[0]||(l[0]=[a("要面向接口编程，不要面向实现编程")])),_:1}),l[2]||(l[2]=a("。"))]),l[19]||(l[19]=e('<h3 id="作用-2" tabindex="-1">作用 <a class="header-anchor" href="#作用-2" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ol><li>依赖倒置原则可以降低类间的耦合性。</li><li>依赖倒置原则可以提高系统的稳定性。</li><li>依赖倒置原则可以减少并行开发引起的风险。</li><li>依赖倒置原则可以提高代码的可读性和可维护性</li></ol><h3 id="实现方式-1" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-1" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><ol><li>每个类尽量提供接口或抽象类，或者两者都具备。</li><li>变量的声明类型尽量是接口或者是抽象类。</li><li>任何类都不应该从具体类派生。</li><li>使用继承时尽量遵循里氏替换原则</li></ol><h2 id="接口隔离原则" tabindex="-1">接口隔离原则 <a class="header-anchor" href="#接口隔离原则" aria-label="Permalink to &quot;接口隔离原则&quot;">​</a></h2><p>客户端不应该被迫依赖于它不使用的方法，一个类对另一个类的依赖应该建立在最小的接口上</p><h3 id="作用-3" tabindex="-1">作用 <a class="header-anchor" href="#作用-3" aria-label="Permalink to &quot;作用&quot;">​</a></h3><ol><li>将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</li><li>接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。</li><li>如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。</li><li>使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。</li><li>能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。</li></ol><h3 id="实现方式-2" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-2" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><ol><li>接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。</li><li>为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。</li><li>了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。</li></ol><h2 id="迪米特法则" tabindex="-1">迪米特法则 <a class="header-anchor" href="#迪米特法则" aria-label="Permalink to &quot;迪米特法则&quot;">​</a></h2><p>如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，通过第三方转发调用降低类之间的耦合度，提高模块的相对独立性</p><h2 id="作用-4" tabindex="-1">作用 <a class="header-anchor" href="#作用-4" aria-label="Permalink to &quot;作用&quot;">​</a></h2><ol><li>降低了类之间的耦合度，提高了模块的相对独立性。</li><li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li></ol><h2 id="实现方式-3" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-3" aria-label="Permalink to &quot;实现方式&quot;">​</a></h2><p><strong>通过第三方转发调用降低类之间的耦合度，提高模块的相对独立性</strong></p><h2 id="开闭原则" tabindex="-1">开闭原则 <a class="header-anchor" href="#开闭原则" aria-label="Permalink to &quot;开闭原则&quot;">​</a></h2><p>当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。</p><h2 id="作用-5" tabindex="-1">作用 <a class="header-anchor" href="#作用-5" aria-label="Permalink to &quot;作用&quot;">​</a></h2><ol><li>方便测试；测试时只需要对扩展的代码进行测试。</li><li>提高代码的可复用性；粒度越小，被复用的可能性就越大。</li><li>提高软件的稳定性和延续性，易于扩展和维护。</li></ol><h2 id="实现方式-4" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式-4" aria-label="Permalink to &quot;实现方式&quot;">​</a></h2><p>通过“抽象约束、封装变化”来实现开闭原则。通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类</p><h1 id="设计模式的分类" tabindex="-1">设计模式的分类 <a class="header-anchor" href="#设计模式的分类" aria-label="Permalink to &quot;设计模式的分类&quot;">​</a></h1><h2 id="目的" tabindex="-1">目的 <a class="header-anchor" href="#目的" aria-label="Permalink to &quot;目的&quot;">​</a></h2><p>根据其<strong>目的</strong>（模式是用来做什么的）可分为<strong>创建型</strong>(Creational)，<strong>结构型</strong>(Structural)和<strong>行为型</strong>(Behavioral)三种：</p>',25)),i("ul",null,[i("li",null,[l[4]||(l[4]=a("**创建型模式：**作用于对象的创建，将对象的创建与使用分离。其中囊括了")),t(r,{color:"red"},{default:o(()=>l[3]||(l[3]=[a("单例、原型、工厂方法、抽象工厂、建造者")])),_:1}),l[5]||(l[5]=a("5 种创建型模式。"))]),i("li",null,[l[7]||(l[7]=a("**结构型模式：**将类或对象按某种布局组成更大的结构，其中以")),t(r,{color:"red"},{default:o(()=>l[6]||(l[6]=[a("代理、适配器、桥接、装饰、外观、享元、组合")])),_:1}),l[8]||(l[8]=a(" 7 种结构型模式为主。"))]),i("li",null,[l[10]||(l[10]=a("**行为型模式：**作用于类或对象之间相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。主要包含了")),t(r,{color:"red"},{default:o(()=>l[9]||(l[9]=[a("模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器")])),_:1}),l[11]||(l[11]=a("等 11 种行为型模式。"))])]),l[20]||(l[20]=i("h2",{id:"范围",tabindex:"-1"},[a("范围 "),i("a",{class:"header-anchor",href:"#范围","aria-label":'Permalink to "范围"'},"​")],-1)),l[21]||(l[21]=i("p",null,[a("根据"),i("strong",null,"范围"),a("（模式主要是用于处理类之间关系还是处理对象之间的关系）可分为"),i("strong",null,"类模式"),a("和"),i("strong",null,"对象模式"),a("两种：")],-1)),i("ul",null,[i("li",null,[l[13]||(l[13]=a("**类模式：**用于处理类与子类之间的关系，这些关系通过继承来建立，在编译时刻便确定下来了。")),t(r,{color:"red"},{default:o(()=>l[12]||(l[12]=[a("工厂、（类）适配器、模板方法、解释器均属于该模式")])),_:1}),l[14]||(l[14]=a("。"))]),i("li",null,[l[16]||(l[16]=a("**对象模式：**用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。")),t(r,{color:"red"},{default:o(()=>l[15]||(l[15]=[a("除了以上 4 种，其他的都是对象模式")])),_:1}),l[17]||(l[17]=a("。"))])]),l[22]||(l[22]=e('<p><img src="https://raw.githubusercontent.com/CNRF/noteImage/main/image/202302050139102.png" alt=""></p><h1 id="设计模式的功能" tabindex="-1">设计模式的功能 <a class="header-anchor" href="#设计模式的功能" aria-label="Permalink to &quot;设计模式的功能&quot;">​</a></h1><ol><li>**单例（Singleton）模式：**某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li><li>**原型（Prototype）模式：**将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li><li>**工厂（Factory Method）模式：**定义一个用于创建产品的接口，由子类决定生产什么产品。</li><li>**抽象工厂（AbstractFactory）模式：**提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li><li>**建造者（Builder）模式：**将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li><li>**代理（Proxy）模式：**为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li><li>**适配器（Adapter）模式：**将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li>**桥接（Bridge）模式：**将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li><li>**装饰（Decorator）模式：**动态的给对象增加一些职责，即增加其额外的功能。</li><li>**外观（Facade）模式：**为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li><li>**享元（Flyweight）模式：**运用共享技术来有效地支持大量细粒度对象的复用。</li><li>**组合（Composite）模式：**将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li><li>**模板方法（TemplateMethod）模式：**定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li><li>**策略（Strategy）模式：**定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li><li>**命令（Command）模式：**将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li><li>**职责链（Chain of Responsibility）模式：**把请求从链中的一个对象传到下一个对象，直到请求被响应通过这种方式去除对象之间的耦合。</li><li>**状态（State）模式：**允许一个对象在其内部状态发生改变时改变其行为能力。</li><li>**观察者（Observer）模式：**多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li><li>**中介者（Mediator）模式：**定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li><li>**迭代器（Iterator）模式：**提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li><li>**访问者（Visitor）模式：**在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li><li>**备忘录（Memento）模式：**在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li><li>**解释器（Interpreter）模式：**提供如何定义语言的放法，以及对语言句子的解释方法，即解释器。</li></ol>',3))])}const k=n(u,[["render",p]]);export{x as __pageData,k as default};
