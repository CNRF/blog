import{_ as n,D as p,c as l,o as t,a3 as a,m as i,H as r,w as d,a as h}from"./chunks/framework.m76fjHMv.js";const o="/blog/assets/565ca9c531c531c8a66420651133e370_MD5.C0qDaiI6.png",c="/blog/assets/f094ed2ecee5dca16e52c0be207fb1e6_MD5.BpYdTHjP.png",k="/blog/assets/981b4889ab52d0adb46250d5b12f4dcc_MD5.BYt801kd.png",g="/blog/assets/0f6a9cfc77506344df301c670023eeaa_MD5.BoI1uL32.png",b="/blog/assets/239cd526c3d14647a61276cd7c76db45_MD5.B9HH6d70.png",u="/blog/assets/1da45db879e41653f54319dca704cfba_MD5.DDbyz4r9.png",m="/blog/assets/ecb178b9649807c23e0e0e2840bf7a2a_MD5.Buc0H1cj.png",E="/blog/assets/d6c0cd4e4c00c57d720711e5cb439544_MD5.DP1Rqc1z.png",y="/blog/assets/9b6b219074cca0c88dd7dab40949a1ec_MD5.DqDAlkfD.png",_="/blog/assets/a4fb05d1fbb3107701a8eb28284abc8f_MD5.HC30XyOM.png",v="/blog/assets/8cd8f8379f6fbbfbb33bb5027eceb868_MD5.D6ZJIF0x.png",f="/blog/assets/f441ad54ef0a5c4bc33751922948c6c8_MD5.Nrx9FAqm.png",D="/blog/assets/74a80fdbf6b3412b2455f414039c7b7e_MD5.DbDawGUs.png",F="/blog/assets/4654e2c912994f258e99f87a7fbf722c.BNL89xVi.png",A="/blog/assets/8b61405caded4ebb9cf0aa43e97db2ab.C2c1lOBf.png",C="/blog/assets/40f54f165b8b45138d0adf947eb013b4.CNzrbKLT.png",x="/blog/assets/d8e9925bf3b445a3812aeca5ab3caa9c.Bv8RrWmu.png",q="/blog/assets/2ef49edd0615433c8d878da02793f414.8O9273Sq.png",L="/blog/assets/d8ba5a3726cc4fc59bdd677cbfe314b7.DYCZCbPg.png",R="/blog/assets/5341da5a2f8c4d548496e938571446fe.Dbkv8lAk.png",S="/blog/assets/6470ee4f75b54fe9a3895a04a285445e.DlIKpaBA.png",P="/blog/assets/d6c0f39567d44f488b33673d7426fae1.D6qW8-LN.png",M="/blog/assets/2cb52dc41f2d467485a6540a03fdad13.BM1nJOoK.png",N="/blog/assets/2be581275fda43d9bde9e919ca08edea.C_xHnjPz.png",B="/blog/assets/6904ca07e50942b9a89624601b7e76d5.CaWicMgP.png",w="/blog/assets/8c5afbb6141042729c9cb6b62eae9be3.BG95uzsF.png",I="/blog/assets/6d37e1eeeac044c8935919a484dc12f4.DPC0aJmj.png",O="/blog/assets/71c66aeee5624538b15c1ac65bfb441c.DACd8pjA.png",T="/blog/assets/b0c30125c76547549274176558ba4eac.DylGenm2.png",H="/blog/assets/c6343d4b9e404154a5d9542ab0991961.DSnry6PZ.png",U="/blog/assets/288265c4c0ef489eb6fd23f908389ba4.DHyLx_6Y.png",Q="/blog/assets/b4ef55a0bbb043aa9fb6ea7aea4014d1.Cpr2XpQD.png",W="/blog/assets/591940f39f1b4b38aa5b32e55202bd60.DRLzkms_.png",Y="/blog/assets/5874bb991dc1459cabd34bfa0bc7299a.bN2O94Ys.png",X="/blog/assets/9dde17c64e9648cd8c41d8ed8e3b2b65.BQ4QRIF-.png",K="/blog/assets/c50ef9c9280f4d8e94cf27cca596f9c1.DWY81PRU.png",j="/blog/assets/d75a6e6d69f547caa3b8661b0a369973.DSkdmkJi.png",V="/blog/assets/8ed4193b0c934d5dbbbc34f8dd581836.a4IysC-Y.png",z="/blog/assets/aa527c85faf945e6a81faaa7a0025409.CmS_eYDw.png",J="/blog/assets/ec817b8cf6e5488bb6e9382e503828f0.HcnGlPnc.png",G="/blog/assets/227c7a3ab927457d84739f1c3583ccdd.nUkBLhGR.png",Z="/blog/assets/d954036891374b18a6ef0671d793cd86.C-6oIbxX.png",$="/blog/assets/14d36c91cf0840a2b2be921b057e6f7a.HJP1lTSX.png",ss="/blog/assets/42ebdd9dd8774f0d939440cde50512e1.CjCaHDKR.png",as="/blog/assets/d2fc5cb60d1c455e92b38dd4f1c87ebe.DgqVwbr7.png",is="/blog/assets/50565fb21ad145d89d0329c126aca8cf.JSEAjv4l.png",es="/blog/assets/ac911fc11114479caa8ae55ac317bacf.DplwL-dX.png",ns="/blog/assets/0dd075168f3e48d69eca71710c72ed9e.BqAC4Ijv.png",ps="/blog/assets/511255e7474c4502b15419058913d0cc.BHA2SRXC.png",ls="/blog/assets/97f9ff147b5a4954aaf006f00b60660d.C4TidDAk.png",ts="/blog/assets/55f8e2400c4845e5b337c1a122ea4737.CjTVpdp_.png",rs="/blog/assets/deabc3433e2440c5be499b296789d427.TO_PE0hr.png",ds="/blog/assets/643d0629a531459594e318cc0ea6547b.PRWWkn7E.png",hs="/blog/assets/aa9bc2fae8c54d4b86a3a38720cc42c2.BPIR4kWP.png",os="/blog/assets/52bc3ba85bc1433cbed4510cba638556.DUNgISUM.png",cs="/blog/assets/645c2fa335824da292d3dcfcb32969e8.D9gR5d-I.png",ks="/blog/assets/3264f862df374302bef83c9459ad0a7a.BBn75Zdk.png",gs="/blog/assets/989e64fc120f45288787f480e1746dc1.DmziGsui.png",bs="/blog/assets/52fccea24657442db67c3d7b102de0fa.DVrlQMOl.png",us="/blog/assets/358846c9b2db4bf79de4e2f200c5e46f.Cv_km0Ph.png",ms="/blog/assets/b24ab67fa56e4da1b7fa151e0098c004.BzcOcZpE.png",Es="/blog/assets/6efb18da3d19465e8538cb4e042d9e86.DzSrWUuy.png",ys="/blog/assets/11ebee5ff9db49b6bef2e80d2b2e46bd.BJrO4WrK.png",_s="/blog/assets/09c50dcca1ab4f33b2247edb054905ae.BuOvhiSf.png",vs="/blog/assets/09c50dcca1ab4f33b2247edb054905ae.BuOvhiSf.png",Rs=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"database/01.mysql/07.MySQL的优化.md","filePath":"database/01.mysql/07.MySQL的优化.md","lastUpdated":1761743522000}'),fs={name:"database/01.mysql/07.MySQL的优化.md"};function Ds(Fs,s,As,Cs,xs,qs){const e=p("font");return t(),l("div",null,[s[4]||(s[4]=a(`<p><a href="https://dev.mysql.com/doc/refman/8.0/en/optimization.html" target="_blank" rel="noreferrer">MySQL优化官网参考</a></p><h2 id="如何优化" tabindex="-1">如何优化 <a class="header-anchor" href="#如何优化" aria-label="Permalink to &quot;如何优化&quot;">​</a></h2><ul><li>设计数据库时：数据库表、字段的设计，存储引擎</li><li>利用好MySQL自身提供的功能，如索引等</li><li>横向扩展：MySQL集群、负载均衡、读写分离</li><li>SQL语句的优化（收效甚微）</li></ul><h2 id="字段设计" tabindex="-1">字段设计 <a class="header-anchor" href="#字段设计" aria-label="Permalink to &quot;字段设计&quot;">​</a></h2><blockquote><p>字段类型的选择，设计规范，范式，常见设计案例</p></blockquote><h3 id="存储ip地址" tabindex="-1">存储IP地址 <a class="header-anchor" href="#存储ip地址" aria-label="Permalink to &quot;存储IP地址&quot;">​</a></h3><p><strong>常规做法</strong>： varchar（15）</p><p><strong>优化选择</strong>：int unsigned，占用4个字节，节省空间，IP运算速度块</p><blockquote><p>inet_aton；</p><p>inet_ntoa;</p><p>a—address,n----number</p></blockquote><h3 id="尽量使用整数去表示字符串" tabindex="-1">尽量使用整数去表示字符串 <a class="header-anchor" href="#尽量使用整数去表示字符串" aria-label="Permalink to &quot;尽量使用整数去表示字符串&quot;">​</a></h3><p><strong>整型的优势</strong>：存储空间固定。往往是少量空间,运算速度块</p><blockquote><p>MySQL 内部的枚举（单选）类型和集合（多选）类型但是，<strong>实操的时候enum和set很少用</strong></p><p><strong>原因</strong>：维护成本高</p><p><strong>使用的替代方案</strong>：关联表</p></blockquote><h3 id="存储金额" tabindex="-1">存储金额 <a class="header-anchor" href="#存储金额" aria-label="Permalink to &quot;存储金额&quot;">​</a></h3><p><strong>金额，价格，统计数据的存储</strong>：对数据的精度要求高,</p><p><strong>优化选择</strong>：</p><ol><li><p><strong>price decimal（8，2）</strong>；定点数，有两位小数的定点数。</p></li><li><p>price int ，bigint，整数，小单位--&gt;大数额，如<strong>9.01 在数据库中存储2为901，在程序中进行相关处理</strong></p><blockquote><p>注意：定点数，支持很大的数，</p><p>转成小单位后，整数存储不了！</p></blockquote></li></ol><h3 id="定长数据类型和变长数据类型的选择" tabindex="-1">定长数据类型和变长数据类型的选择 <a class="header-anchor" href="#定长数据类型和变长数据类型的选择" aria-label="Permalink to &quot;定长数据类型和变长数据类型的选择&quot;">​</a></h3><p><strong>定点数和浮点数的选择</strong></p><p><strong>定点数</strong>：不会精度丢失。 占用空间随者数字的增加而增加</p><p><strong>浮点数</strong>：导致精度丢失 。占用固定的存储空间，无论存储多大的数据，占用的空间是固定的（类似于int）</p><p><strong>定长类型</strong>：存储空间固定：int，float,double.char,date,time,datetime,year,timestamp</p><p><strong>变长类型</strong>：存储空间可变：varchar,decimal,text</p><h3 id="字符串类型的选择" tabindex="-1">字符串类型的选择 <a class="header-anchor" href="#字符串类型的选择" aria-label="Permalink to &quot;字符串类型的选择&quot;">​</a></h3><p><strong>使用varchar</strong></p><blockquote><p>char(10) 如果你存abc，需要空间为10，3个存abc，7个存空字符，因为char是固定长度</p><p>varchar(10)如果你存abc，需要空间为4，3个存abc，1个存长度，varchar是可变长度</p><p><strong>超过10的部分，都会被截断</strong></p></blockquote><p><strong>text,类型独立存储，不占用字段总空间</strong></p><h3 id="尽可能选择小的数据类型和指定短的长度" tabindex="-1">尽可能选择小的数据类型和指定短的长度 <a class="header-anchor" href="#尽可能选择小的数据类型和指定短的长度" aria-label="Permalink to &quot;尽可能选择小的数据类型和指定短的长度&quot;">​</a></h3><h3 id="尽可能使用-not-null" tabindex="-1">尽可能使用 not null <a class="header-anchor" href="#尽可能使用-not-null" aria-label="Permalink to &quot;尽可能使用 not null&quot;">​</a></h3><p><strong>非<code>null</code>字段的处理要比<code>null</code>字段的处理高效些</strong>！且不需要判断是否为<code>null</code>。</p><p><code>null</code>在MySQL中，不好处理，<strong>存储需要额外空间，运算也需要特殊的运算符</strong>。如<code>select null = null</code>和<code>select null &lt;&gt; null</code>（<code>&lt;&gt;</code>为不等号）有着同样的结果，只能通过<code>is null</code>和<code>is not null</code>来判断字段是否为<code>null</code>。</p><blockquote><p>MySQL中每条记录都需要额外的存储空间，表示每个字段是否为<code>null</code>。因此通常使用特殊的数据进行占位，比如<code>int not null default 0</code>、<code>string not null default ‘’</code></p></blockquote><h3 id="字段注释要完整-见名知意" tabindex="-1">字段注释要完整，见名知意 <a class="header-anchor" href="#字段注释要完整-见名知意" aria-label="Permalink to &quot;字段注释要完整，见名知意&quot;">​</a></h3><h3 id="单表字段不宜过多" tabindex="-1">单表字段不宜过多 <a class="header-anchor" href="#单表字段不宜过多" aria-label="Permalink to &quot;单表字段不宜过多&quot;">​</a></h3><blockquote><p>当单表字段字段过多，可以考虑拆成多张表，将小长度的字段放在一张表，其余的放在其他表中</p></blockquote><h3 id="可以预留字段" tabindex="-1">可以预留字段 <a class="header-anchor" href="#可以预留字段" aria-label="Permalink to &quot;可以预留字段&quot;">​</a></h3><blockquote><p>优先满足业务，可以预留一些字段</p></blockquote><h2 id="关联表的设计" tabindex="-1">关联表的设计 <a class="header-anchor" href="#关联表的设计" aria-label="Permalink to &quot;关联表的设计&quot;">​</a></h2><blockquote><p>外键<code>foreign key</code>只能实现一对一或一对多的映射</p></blockquote><h3 id="一对多" tabindex="-1">一对多 <a class="header-anchor" href="#一对多" aria-label="Permalink to &quot;一对多&quot;">​</a></h3><blockquote><p>使用外键</p></blockquote><h3 id="多对多" tabindex="-1">多对多 <a class="header-anchor" href="#多对多" aria-label="Permalink to &quot;多对多&quot;">​</a></h3><blockquote><p>使用中间表存储两表之间的关联关系</p></blockquote><h3 id="一对一" tabindex="-1">一对一 <a class="header-anchor" href="#一对一" aria-label="Permalink to &quot;一对一&quot;">​</a></h3><blockquote><p>如商品的基本信息（<code>item</code>）和商品的详细信息（<code>item_intro</code>），通常使用相同的主键或者增加一个外键字段（<code>item_id</code>）</p></blockquote><h2 id="索引" tabindex="-1">索引 <a class="header-anchor" href="#索引" aria-label="Permalink to &quot;索引&quot;">​</a></h2><blockquote><p>关键字与数据的映射关系称为索引（==包含关键字和对应的记录在磁盘中的地址==）。关键字是从数据当中提取的用于标识、检索数据的特定内容。</p></blockquote><h3 id="索引检索为什么快" tabindex="-1">索引检索为什么快 <a class="header-anchor" href="#索引检索为什么快" aria-label="Permalink to &quot;索引检索为什么快&quot;">​</a></h3><ol><li><p>关键字相对于数据本身，==数据量小==</p></li><li><p>关键字是==有序==的，二分查找可快速确定位置</p><blockquote><p>图书馆为每本书都加了索引号（类别-楼层-书架）、字典为词语解释按字母顺序编写目录等都用到了索引。</p></blockquote></li></ol><h3 id="mysql中索引类型" tabindex="-1">MySQL中索引类型 <a class="header-anchor" href="#mysql中索引类型" aria-label="Permalink to &quot;MySQL中索引类型&quot;">​</a></h3><ol><li><strong>普通索引</strong>（<code>key</code>）</li><li><strong>唯一索引</strong>（<code>unique key</code>）</li><li><strong>主键索引</strong>（<code>primary key</code>）</li><li><strong>全文索引</strong>（<code>fulltext key</code>）</li></ol><h4 id="索引的关键字有不同的限制" tabindex="-1">索引的关键字有不同的限制： <a class="header-anchor" href="#索引的关键字有不同的限制" aria-label="Permalink to &quot;索引的关键字有不同的限制：&quot;">​</a></h4><ul><li>**普通索引：**对关键字没有限制</li><li>**唯一索引：**要求记录提供的关键字不能重复</li><li>**主键索引：**要求关键字唯一且不为null</li></ul><h3 id="索引管理语法" tabindex="-1">索引管理语法 <a class="header-anchor" href="#索引管理语法" aria-label="Permalink to &quot;索引管理语法&quot;">​</a></h3><h4 id="查看索引" tabindex="-1">查看索引 <a class="header-anchor" href="#查看索引" aria-label="Permalink to &quot;查看索引&quot;">​</a></h4><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--查看建表语句</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`user\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--查看表中字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--查看表中所有索引</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`表名\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`表名\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`user_index\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`user_index\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><img src="`+o+'" alt=""></p><p><img src="'+c+`" alt=""></p><h4 id="创建索引" tabindex="-1">创建索引 <a class="header-anchor" href="#创建索引" aria-label="Permalink to &quot;创建索引&quot;">​</a></h4><h5 id="创建表之后建立索引" tabindex="-1">创建表之后建立索引 <a class="header-anchor" href="#创建表之后建立索引" aria-label="Permalink to &quot;创建表之后建立索引&quot;">​</a></h5><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto_increment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	first_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id_card </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	information </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 创建一个first_name和last_name的复合索引，并命名为name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (first_name,last_name),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 创建一个id_card的唯一索引，默认以字段名作为索引名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id_card),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 鸡肋，全文索引不支持中文</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FULLTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (information);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="创建表时指定索引" tabindex="-1">创建表时指定索引 <a class="header-anchor" href="#创建表时指定索引" aria-label="Permalink to &quot;创建表时指定索引&quot;">​</a></h5><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user_index2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto_increment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	first_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	last_name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id_card </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	information </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (first_name, last_name),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	FULLTEXT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (information),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id_card)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="删除索引" tabindex="-1">删除索引 <a class="header-anchor" href="#删除索引" aria-label="Permalink to &quot;删除索引&quot;">​</a></h4><h5 id="删除普通索引、唯一索引、全文索引" tabindex="-1">删除普通索引、唯一索引、全文索引 <a class="header-anchor" href="#删除普通索引、唯一索引、全文索引" aria-label="Permalink to &quot;删除普通索引、唯一索引、全文索引&quot;">​</a></h5><p>根据索引名删除普通索引、唯一索引、全文索引：<code>alter table 表名 drop KEY 索引名</code></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----删除普通索引、唯一索引、全文索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 索引名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id_card;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> information;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="删除主键索引" tabindex="-1">删除主键索引 <a class="header-anchor" href="#删除主键索引" aria-label="Permalink to &quot;删除主键索引&quot;">​</a></h5><p>删除主键索引：<code>alter table 表名 drop primary key</code>（因为主键只有一个）。这里值得注意的是，如果主键自增长，那么不能直接执行此操作（自增长依赖于主键索引）：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---删除主键索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+k+`" alt=""></p><p><strong>需要取消自增长</strong>：</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--取消主键自增</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`表名\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MODIFY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN 字段名 字段类型（长度） </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FIRST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`user_index\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MODIFY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COLUMN id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FIRST</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---删除主键索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> primary key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="索引失效" tabindex="-1">索引失效 <a class="header-anchor" href="#索引失效" aria-label="Permalink to &quot;索引失效&quot;">​</a></h3>`,73)),i("ol",null,[s[2]||(s[2]=a('<li><p><strong>like 以%开头</strong>，索引无效；<strong>当like前缀没有%，后缀有%时，索引有效</strong>。</p><p><img src="'+g+'" alt=""></p></li><li><p><strong>or语句前后没有同时使用索引</strong>。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效</p><p><img src="'+b+'" alt=""></p></li><li><p><strong>组合索引，不是使用第一列索引</strong>，索引失效。</p><p><img src="'+u+'" alt=""></p></li><li><p><strong>数据类型出现隐式转化</strong>。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</p><p><img src="'+m+'" alt=""></p></li>',4)),i("li",null,[i("p",null,[i("strong",null,[r(e,{color:"red"},{default:d(()=>[...s[0]||(s[0]=[h("在索引列上使用 IS NULL 或 IS NOT NULL操作，索引不一定失效，可能在某些情况会失效",-1)])]),_:1})])]),s[1]||(s[1]=a('<p><img src="'+E+'" alt=""></p><p>此处我将重新创建一个emp表（<strong>此处索引为InnoDB类型索引</strong>）</p><p><img src="'+y+'" alt=""></p><p><img src="'+_+`" alt=""></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----创建新索引</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emp(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+v+'" alt=""></p><p><img src="'+f+'" alt=""></p>',7))]),s[3]||(s[3]=a(`<li><p><strong>在索引字段上使用not，&lt;&gt;，!=</strong>。不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 优化方法： key&lt;&gt;0 改为 key&gt;0 or key&lt;0。</p></li><li><p><strong>当全表扫描速度比索引速度快时，mysql会使用全表扫描，此时索引失效。</strong></p></li><li><p><strong>不要在字段中做运算</strong></p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----下面两条SQL语句在语义上相同，(id为主键)但是第一条会使用主键索引而第二条不会。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li>`,3))]),s[5]||(s[5]=a(`<h2 id="索引使用场景-重点" tabindex="-1">索引使用场景（重点） <a class="header-anchor" href="#索引使用场景-重点" aria-label="Permalink to &quot;索引使用场景（重点）&quot;">​</a></h2><h3 id="where" tabindex="-1">where <a class="header-anchor" href="#where" aria-label="Permalink to &quot;where&quot;">​</a></h3><p>根据<code>id</code>查询记录，因为<code>id</code>字段仅建立了主键索引，因此此SQL执行可选的索引只有主键索引，如果有多个，最终会选一个较优的作为检索的依据。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 增加一个没有建立索引的字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">alter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> innodb1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 按sex检索时可选的索引为null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> innodb1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;男&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="`+D+'" alt=""></p><blockquote><p>可以尝试在一个字段未建立索引时，根据该字段查询的效率，然后对该字段建立索引（<code>alter table 表名 add index(字段名)</code>），同样的SQL执行的效率，你会发现查询效率会有明显的提升（数据量越大越明显）。</p></blockquote><h3 id="order-by" tabindex="-1">order by <a class="header-anchor" href="#order-by" aria-label="Permalink to &quot;order by&quot;">​</a></h3><ul><li><p><strong>该字段没有建立索引</strong></p><p>将<strong>查询出的所有数据使用外部排序</strong>（将数据从硬盘分批读取到内存使用内部排序，最后合并排序结果）</p></li><li><p><strong>该字段建立索引</strong></p><p>直接<strong>按照索引的顺序和映射关系逐条取出数据</strong>。而且如果分页的，那么只用<strong>取出索引表某个范围内的索引对应的数据</strong></p></li></ul><h3 id="join" tabindex="-1">join <a class="header-anchor" href="#join" aria-label="Permalink to &quot;join&quot;">​</a></h3><blockquote><p>对<code>join</code>语句匹配关系（<code>on</code>）涉及的字段建立索引能够提高效率</p></blockquote><h3 id="索引覆盖" tabindex="-1">索引覆盖 <a class="header-anchor" href="#索引覆盖" aria-label="Permalink to &quot;索引覆盖&quot;">​</a></h3><p>如果要查询的字段都建立过索引，那么引擎会直接在索引表中查询而不会访问原始数据（否则只要有一个字段没有建立索引就会做全表扫描），这叫索引覆盖。因此我们需要尽可能的在<code>select</code>后==只写必要的查询字段==，以增加索引覆盖的几率。</p><h3 id="高性能的索引使用策略" tabindex="-1">高性能的索引使用策略 <a class="header-anchor" href="#高性能的索引使用策略" aria-label="Permalink to &quot;高性能的索引使用策略&quot;">​</a></h3><h4 id="不在索引列上做任何操作" tabindex="-1">不在索引列上做任何操作 <a class="header-anchor" href="#不在索引列上做任何操作" aria-label="Permalink to &quot;不在索引列上做任何操作&quot;">​</a></h4><p>我们通常会看到一些查询不当地使用索引，或者使得MySQL无法使用已有的索引。如果查询中的列不是独立的，则 MySQL就不会使用索引。“独立的列”是指索引列不能是表达式的一部分，也不能是函数的参数。</p><p>例如，我们假设id上有主键索引，但是下面这个查询无法使用主键索引:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM order_exp WHERE id + 1 = 17;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+F+'" alt="image.png"></p><p><img src="'+A+'" alt="image.png"></p><p>凭肉眼很容易看出 WHERE中的表达式其实等价于id= 16，但是MySQL无法自动解析这个方程式。这完全是用户行为。我们应该养成简化WHERE条件的习惯，始终将索引列单独放在比较符号的一侧。</p><p>下面是另一个常见的错误:</p><p>在索引列上使用函数，也是无法利用索引的。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN SELECT * from order_exp WHERE YEAR(insert_time)=YEAR(DATE_SUB(NOW(),INTERVAL 1 YEAR));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+C+'" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN SELECT * from order_exp WHERE insert_time BETWEEN str_to_date(&#39;01/01/2021&#39;, &#39;%m/%d/%Y&#39;) and str_to_date(&#39;12/31/2021&#39;, &#39;%m/%d/%Y&#39;);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+x+'" alt="image.png"></p><h4 id="尽量全值匹配" tabindex="-1">尽量全值匹配 <a class="header-anchor" href="#尽量全值匹配" aria-label="Permalink to &quot;尽量全值匹配&quot;">​</a></h4><p>建立了联合索引列后，如果我们的搜索条件中的列和索引列一致的话，这种情况就称为全值匹配，比方说下边这个查找语句：</p><p><img src="'+q+'" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span> EXPLAIN select * from order_exp where insert_time=&#39;2021-03-22 18:34:55&#39; and order_status=0 and expire_time=&#39;2021-03-22 18:35:14&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>我们建立的u_idx_day_statusr索引包含的3个列在这个查询语句中都展现出来了，联合索引中的三个列都可能被用到。</p><p><img src="'+L+'" alt="image.png"></p><p>有的同学也许有个疑问，WHERE子句中的几个搜索条件的顺序对查询结果有啥影响么？也就是说如果我们调换 <code>insert_time</code>, <code>order_status</code>, <code>expire_time</code>这几个搜索列的顺序对查询的执行过程有影响么？比方说写成下边这样：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp where  order_status=0 and insert_time=&#39;2021-03-22 18:34:55&#39;  and expire_time=&#39;2021-03-22 18:35:14&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>放心，MySQL没这么蠢，查询优化器会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。</p><p><img src="'+R+'" alt="image.png"></p><p>所以，当建立了联合索引列后，能在where条件中使用索引的尽量使用。</p><h4 id="最佳左前缀法则" tabindex="-1">最佳左前缀法则 <a class="header-anchor" href="#最佳左前缀法则" aria-label="Permalink to &quot;最佳左前缀法则&quot;">​</a></h4><p>建立了联合索引列，如果搜索条件不够全值匹配怎么办？在我们的搜索语句中也可以不用包含全部联合索引中的列，但要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。</p><p>搜索条件中必须出现左边的列才可以使用到这个B+树索引</p><p><img src="'+S+'" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp where insert_time=&#39;2021-03-22 18:23:42&#39; and order_status=1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+P+'" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp where insert_time=&#39;2021-03-22 18:23:42&#39; ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+M+'" alt="image.png"></p><p>搜索条件中没有出现左边的列不可以使用到这个B+树索引</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM order_exp WHERE order_status=1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+N+'" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN Select * from s1 where order_status=1 and expire_time=&#39;2021-03-22 18:35:14&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+B+'" alt="image.png"></p><p><img src="'+w+'" alt="image.png"></p><p>那为什么搜索条件中必须出现左边的列才可以使用到这个B+树索引呢？比如下边的语句就用不到这个B+树索引么？</p><p><img src="'+I+'" alt="image.png"></p><p>因为B+树的数据页和记录先是按照insert_time列的值排序的，在insert_time列的值相同的情况下才使用order_status列进行排序，也就是说insert_time列的值不同的记录中order_status的值可能是无序的。而现在你跳过insert_time列直接根据order_status的值去查找，怎么可能呢？expire_time也是一样的道理，那如果我就想在只使用expire_time的值去通过B+树索引进行查找咋办呢？这好办，你再对expire_time列建一个B+树索引就行了。</p><p>但是需要特别注意的一点是，如果我们想使用联合索引中尽可能多的列，搜索条件中的各个列必须是联合索引中从最左边连续的列。比方说联合索引u_idx_day_status中列的定义顺序是 <code>insert_time</code>, <code>order_status</code>, <code>expire_time</code>，如果我们的搜索条件中只有insert_time和expire_time，而没有中间的order_status，</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp where insert_time=&#39;2021-03-22 18:23:42&#39; and expire_time=&#39;2021-03-22 18:35:14&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+O+'" alt="image.png"></p><p><img src="'+T+'" alt="image.png"></p><p>请注意key_len,只有5，说明只有insert_time用到了，其他的没有用到。</p><h4 id="范围条件放最后" tabindex="-1">范围条件放最后 <a class="header-anchor" href="#范围条件放最后" aria-label="Permalink to &quot;范围条件放最后&quot;">​</a></h4><p>这一点，也是针对联合索引来说的，前面我们反复强调过，所有记录都是按照索引列的值从小到大的顺序排好序的，而联合索引则是按创建索引时的顺序进行分组排序。</p><p>比如：</p><p><img src="'+H+'" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp_cut where insert_time&gt;&#39;2021-03-22 18:23:42&#39; and insert_time&lt;&#39;2021-03-22 18:35:00&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+U+'" alt="image.png"></p><p>由于B+树中的数据页和记录是先按insert_time列排序的，所以我们上边的查询过程其实是这样的：</p><p>找到insert_time值为&#39;2021-03-22 18:23:42&#39; 的记录。</p><p>找到insert_timee值为&#39;2021-03-22 18:35:00&#39;的记录。</p><p>由于所有记录都是由链表连起来的，所以他们之间的记录都可以很容易的取出来，找到这些记录的主键值，再到聚簇索引中回表查找完整的记录。</p><p>但是如果对多个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查找的时候才能用到B+树索引：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from order_exp_cut where insert_time&gt;&#39;2021-03-22 18:23:42&#39; and insert_time&lt;&#39;2021-03-22 18:35:00&#39; and order_status &gt; -1;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Q+`" alt="image.png"></p><p>上边这个查询可以分成两个部分：</p><p>通过条件insert_time&gt;&#39;2021-03-22 18:23:42&#39; and insert_time&lt;&#39;2021-03-22 18:35:00&#39; 来对insert_time进行范围，查找的结果可能有多条insert_time值不同的记录，</p><p>对这些insert_time值不同的记录继续通过order_status&gt;-1条件继续过滤。</p><p>这样子对于联合索引u_idx_day_status来说，只能用到insert_time列的部分，而用不到order_status列的部分（这里的key_len和之前的SQL的是一样长），因为只有insert_time值相同的情况下才能用order_status列的值进行排序，而这个查询中通过insert_time进行范围查找的记录中可能并不是按照order_status列进行排序的，所以在搜索条件中继续以order_status列进行查找时是用不到这个B+树索引的。</p><p><strong>所以对于一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp_cut</span></span>
<span class="line"><span>where insert_time=&#39;2021-03-22 18:34:55&#39; and order_status=0 and expire_time&gt;&#39;2021-03-22</span></span>
<span class="line"><span>18:23:57&#39; and expire_time&lt;&#39;2021-03-22 18:35:00&#39; ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+W+`" alt="image.png"></p><p><strong>而中间有范围查询会导致后面的列全部失效，无法充分利用这个联合索引：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp_cut</span></span>
<span class="line"><span>where insert_time=&#39;2021-03-22 18:23:42&#39; and order_status&gt;-1 and expire_time=&#39;2021-03-22</span></span>
<span class="line"><span>18:35:14&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+Y+`" alt="image.png"></p><h4 id="覆盖索引尽量用" tabindex="-1">覆盖索引尽量用 <a class="header-anchor" href="#覆盖索引尽量用" aria-label="Permalink to &quot;覆盖索引尽量用&quot;">​</a></h4><p>覆盖索引是非常有用的工具，能够极大地提高性能，三星索引里最重要的那颗星就是宽索引星。考虑一下如果查询只需要扫描索引而无须回表，会带来多少好处:</p><p>索引条目通常远小于数据行大小，所以如果只需要读取索引，那 MySQL就会极大地减少数据访问量。这对缓存的负载非常重要，因为这种情况下响应时间大部分花费在数据拷贝上。覆盖索引对于I/O密集型的应用也有帮助，因为索引比数据更小,更容易全部放入内存中。</p><p>因为索引是按照列值顺序存储的，所以对于I/O密集型的范围查询会比随机从磁盘读取每一行数据的I/O要少得多。</p><p>由于InnoDB的聚簇索引，覆盖索引对InnoDB表特别有用。InnoDB的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询。</p><p>尽量使用覆盖索引(只访问索引的查询(索引列和查询列一致))，不是必要的情况下减少select*，除非是需要将表中的全部列检索后，进行缓存。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN  select * from</span></span>
<span class="line"><span>order_exp_cut where insert_time=&#39;2021-03-22 18:34:55&#39; and order_status=0 and</span></span>
<span class="line"><span>expire_time=&#39;2021-03-22 18:35:04&#39; ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+X+`" alt="image.png"></p><p>使用具体名称取代*</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN  select expire_time,id from</span></span>
<span class="line"><span>order_exp_cut where insert_time=&#39;2021-03-22 18:34:55&#39; and order_status=0 and</span></span>
<span class="line"><span>expire_time=&#39;2021-03-22 18:35:04&#39; ;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+K+'" alt="image.png"></p><p><strong>解释一下Extra中的Using index</strong></p><p>当我们的查询列表以及搜索条件中只包含属于某个索引的列，也就是在可以<strong>使用索引覆盖的情况</strong>下，在Extra列将会提示该额外信息。以上的查询中只需要用到u_idx_day_status而不需要回表操作：</p><h4 id="不等于要慎用" tabindex="-1">不等于要慎用 <a class="header-anchor" href="#不等于要慎用" aria-label="Permalink to &quot;不等于要慎用&quot;">​</a></h4><p>mysql 在使用不等于(!= 或者&lt;&gt;)的时候无法使用索引会导致全表扫描</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN  SELECT * FROM order_exp WHERE order_no &lt;&gt; &#39;DD00_6S&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+j+'" alt="image.png"></p><p><strong>解释一下Extra中的Using where</strong> 当我们使用全表扫描来执行对某个表的查询，并且该语句的WHERE子句中有针对该表的搜索条件时，在Extra列中会提示上述额外信息。</p><h4 id="null-not-有影响" tabindex="-1">Null/Not 有影响 <a class="header-anchor" href="#null-not-有影响" aria-label="Permalink to &quot;Null/Not 有影响&quot;">​</a></h4><p>需要注意null/not null对索引的可能影响</p><p><strong>表order_exp的order_no为索引列，同时不允许为null，</strong></p><p><img src="'+V+`" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT * FROM order_exp WHERE order_no is null;</span></span>
<span class="line"><span>explain SELECT * FROM order_exp WHERE order_no is not null;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+z+'" alt="image.png"></p><p><img src="'+J+`" alt="image.png"></p><p>可以看见，order_no is null的情况下，MySQL直接表示Impossible WHERE(查询语句的WHERE子句永远为FALSE时将会提示该额外信息)，对于 is not null直接走的全表扫描。</p><p><strong>表order_exp_cut的order_no为索引列，同时允许为null，</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT * FROM order_exp_cut WHERE order_no is null;</span></span>
<span class="line"><span>explain SELECT * FROM order_exp_cut WHERE order_no is not null;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+G+'" alt="image.png"></p><p><img src="'+Z+`" alt="image.png"></p><p>is null会走ref类型的索引访问，is not null;依然是全表扫描。所以总结起来：</p><p>is not null容易导致索引失效，is null则会区分被检索的列是否为null，如果是null则会走ref类型的索引访问，如果不为null，也是全表扫描。</p><p><strong>但是当联合索引上使用时覆盖索引时，情况会有一些不同(order_exp_cut表的order_no可为空)：</strong></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT order_status,expire_time FROM order_exp WHERE insert_time is null;</span></span>
<span class="line"><span>explain SELECT order_status,expire_time FROM order_exp WHERE insert_time is not null;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+$+'" alt="image.png"></p><p><img src="'+ss+`" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT order_status,expire_time FROM order_exp_cut WHERE insert_time is null;</span></span>
<span class="line"><span>explain SELECT order_status,expire_time FROM order_exp_cut WHERE insert_time is not null;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+as+'" alt="image.png"></p><p><img src="'+is+'" alt="image.png"></p><p>根据system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;ALL 的原则，看起来在联合索引中，is not null的表现会更好（如果列可为null的话），但是key_len的长度增加了1。所以总的来说，在设计表时列尽可能的不要声明为null。</p><h4 id="like查询要当心" tabindex="-1">Like查询要当心 <a class="header-anchor" href="#like查询要当心" aria-label="Permalink to &quot;Like查询要当心&quot;">​</a></h4><p>like以通配符开头(&#39;%abc...&#39;)，mysql索引失效会变成全表扫描的操作</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT * FROM order_exp WHERE order_no like &#39;%_6S&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+es+'" alt="image.png"></p><p>此时如果使用覆盖索引可以改善这个问题</p><p><img src="'+ns+`" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT order_status,expire_time FROM order_exp_cut WHERE insert_time like &#39;%18:35:09&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/5983/1651212459071/e494db4f81c846db89e74e6d23cdc646.png" alt="image.png"></p><h4 id="_1-3-6-9-字符类型加引号" tabindex="-1">1.3.6.9.字符类型加引号 <a class="header-anchor" href="#_1-3-6-9-字符类型加引号" aria-label="Permalink to &quot;1.3.6.9.字符类型加引号&quot;">​</a></h4><p>字符串不加单引号索引失效</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT * FROM order_exp WHERE order_no = 6;</span></span>
<span class="line"><span>explain SELECT * FROM order_exp WHERE order_no = &#39;6&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+ps+'" alt="image.png"></p><p><img src="'+ls+`" alt="image.png"></p><p>MySQL的查询优化器，会自动的进行类型转换，比如上个语句里会尝试将order_no转换为数字后和6进行比较，自然造成索引失效。</p><h4 id="使用or关键字时要注意" tabindex="-1">使用or关键字时要注意 <a class="header-anchor" href="#使用or关键字时要注意" aria-label="Permalink to &quot;使用or关键字时要注意&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT * FROM order_exp WHERE order_no = &#39;DD00_6S&#39; OR order_no = &#39;DD00_9S&#39;;</span></span>
<span class="line"><span>explain SELECT * FROM order_exp WHERE expire_time= &#39;2021-03-22 18:35:09&#39;  OR order_note = &#39;abc&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+ts+'" alt="image.png"></p><p>表现是不一样的，第一个SQL的or是相同列，相当于产生两个扫描区间，可以使用上索引。</p><p>第二个SQL中or是不同列，并且order_note不是索引。所以只能全表扫描</p><p>当然如果两个条件都是索引列，情况会有变化：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain  SELECT * FROM order_exp WHERE expire_time= &#39;2021-03-22 18:35:09&#39;  OR order_no = &#39;DD00_6S&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+rs+`" alt="image.png"></p><p>这也给了我们提示，如果我们将 SQL改成union all</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT * FROM order_exp WHERE expire_time= &#39;2021-03-22 18:35:09&#39; </span></span>
<span class="line"><span>					union all SELECT * FROM order_exp WHERE order_note = &#39;abc&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+ds+'" alt="image.png"></p><p>当然使用覆盖扫描也可以改善这个问题：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain SELECT order_status,id FROM order_exp_cut WHERE insert_time=&#39;2021-03-22 18:34:55&#39; or expire_time=&#39;2021-03-22 18:28:28&#39;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+hs+`" alt="image.png"></p><h4 id="使用索引扫描来做排序和分组" tabindex="-1">使用索引扫描来做排序和分组 <a class="header-anchor" href="#使用索引扫描来做排序和分组" aria-label="Permalink to &quot;使用索引扫描来做排序和分组&quot;">​</a></h4><p>MySQL有两种方式可以生成有序的结果﹔通过排序操作﹔或者按索引顺序扫描施﹔如果EXPLAIN出来的type列的值为“index”，则说明MySQL使用了索引扫描来做排序。</p><p>扫描索引本身是很快的，因为只需要从一条索引记录移动到紧接着的下一条记录。但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就都回表查询一次对应的行。这基本上都是随机I/O，因此按索引顺序读取数据的速度通常要比顺序地全表扫描慢，尤其是在IO密集型的工作负载时。</p><p>MySQL可以使用同一个索引既满足排序，又用于查找行。因此，如果可能，设计索引时应该尽可能地同时满足这两种任务，这样是最好的。</p><p>只有当索引的列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向（倒序或正序）都一样时，MySQL才能够使用索引来对结果做排序。如果查询需要关联多张表，则只有当0RDER BY子句引用的字段全部为第一个表时，才能使用索引做排序。</p><h4 id="排序要当心" tabindex="-1">排序要当心 <a class="header-anchor" href="#排序要当心" aria-label="Permalink to &quot;排序要当心&quot;">​</a></h4><p><strong>ASC、DESC别混用</strong></p><p>对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。</p><p><strong>排序列包含非同一个索引的列</strong></p><p>用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>explain</span></span>
<span class="line"><span>SELECT * FROM order_exp order by</span></span>
<span class="line"><span>order_no,insert_time;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+os+'" alt="image.png"></p><p><img src="'+cs+'" alt="image.png"></p><h4 id="尽可能按主键顺序插入行" tabindex="-1">尽可能按主键顺序插入行 <a class="header-anchor" href="#尽可能按主键顺序插入行" aria-label="Permalink to &quot;尽可能按主键顺序插入行&quot;">​</a></h4><p>最好避免随机的（不连续且值的分布范围非常大）聚簇索引，特别是对于I/O密集型的应用。例如，从性能的角度考虑，使用UUID来作为聚簇索引则会很糟糕，它使得聚簇索引的插入变得完全随机，这是最坏的情况，使得数据没有任何聚集特性。</p><p>最简单的方法是使用AUTO_INCREMENT自增列。这样可以保证数据行是按顺序写入，对于根据主键做关联操作的性能也会更好。</p><p>注意到向UUID主键插入行不仅花费的时间更长，而且索引占用的空间也更大。这一方面是由于主键字段更长﹔另一方面毫无疑问是由于页分裂和碎片导致的。</p><p>因为主键的值是顺序的，所以InnoDB把每一条记录都存储在上一条记录的后面。当达到页的最大填充因子时(InnoDB默认的最大填充因子是页大小的15/16，留出部分空间用于以后修改)，下一条记录就会写入新的页中。一旦数据按照这种顺序的方式加载,主键页就会近似于被顺序的记录填满,这也正是所期望的结果。</p><p>如果新行的主键值不一定比之前插入的大，所以InnoDB无法简单地总是把新行插入到索引的最后，而是需要为新的行寻找合适的位置-—通常是已有数据的中间位置——并且分配空间。这会增加很多的额外工作，并导致数据分布不够优化。下面是总结的一些缺点:</p><p>写入的目标页可能已经刷到磁盘上并从缓存中移除，或者是还没有被加载到缓存中，InnoDB在插入之前不得不先找到并从磁盘读取目标页到内存中。这将导致大量的随机IO。</p><p>因为写入是乱序的，InnoDB不得不频繁地做页分裂操作，以便为新的行分配空间。页分裂会导致移动大量数据，一次插入最少需要修改三个页而不是一个页。</p><p>所以使用InnoDB时应该尽可能地按主键顺序插入数据，并且尽可能地使用单调增加的聚簇键的值来插入新行。</p><h4 id="优化count查询" tabindex="-1">优化Count查询 <a class="header-anchor" href="#优化count查询" aria-label="Permalink to &quot;优化Count查询&quot;">​</a></h4><p>首先要注意，COUNT()是一个特殊的函数，有两种非常不同的作用:它可以统计某个列值的数量，也可以统计行数。</p><p>在统计列值时要求列值是非空的（不统计NULL)。</p><p>COUNT()的另一个作用是统计结果集的行数。常用的就是就是当我们使用COUNT(*)。实际上，它会忽略所有的列而直接统计所有的行数。</p><p><img src="'+ks+`" alt="image.png"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select count(*) from test;</span></span>
<span class="line"><span>select count(c1) from test;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+gs+'" alt="image.png"><img src="'+bs+'" alt="image.png"></p><p>通常来说，COUNT()都需要扫描大量的行（意味着要访问大量数据）才能获得精确的结果，因此是很难优化的。在MySQL层面能做的基本只有索引覆盖扫描了。如果这还不够,就需要考虑修改应用的架构，可以用估算值取代精确值，可以增加汇总表，或者增加类似Redis这样的外部缓存系统。</p><h4 id="优化limit分页" tabindex="-1">优化limit分页 <a class="header-anchor" href="#优化limit分页" aria-label="Permalink to &quot;优化limit分页&quot;">​</a></h4><p>在系统中需要进行分页操作的时候，我们通常会使用LIMIT加上偏移量的办法实现，同时加上合适的ORDER BY子句。</p><p>一个非常常见又令人头疼的问题就是，在偏移量非常大的时候，例如可能是</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>select * from order_exp limit 10000,10;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+us+`" alt="image.png"></p><p>这样的查询，这时MySQL需要查询10010条记录然后只返回最后10条，前面10 000条记录都将被抛弃，这样的代价非常高。</p><p>优化此类分页查询的一个最简单的办法是</p><p>会先查询翻页中需要的N条数据的主键值，然后根据主键值回表查询所需要的N条数据，在此过程中查询N条数据的主键id在索引中完成，所以效率会高一些。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN SELECT * FROM (select id from order_exp limit 10000,10) b,order_exp</span></span>
<span class="line"><span>					a where a.id = b.id;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="`+ms+'" alt="image.png"></p><p>从执行计划中可以看出，首先执行子查询中的order_exp表，根据主键做索引全表扫描，然后与a表通过id做主键关联查询，相比传统写法中的全表扫描效率会高一些。</p><p>从两种写法上能看出性能有一定的差距，虽然并不明显，但是随着数据量的增大，两者执行的效率便会体现出来。</p><p>上面的写法虽然可以达到一定程度的优化，但还是存在性能问题。最佳的方式是在业务上进行配合修改为以下语句：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>EXPLAIN select * from order_exp where id &gt; 67 order by id limit 10;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+Es+'" alt="image.png"></p><p>采用这种写法，需要前端通过点击More来获得更多数据，而不是纯粹的翻页，因此，每次查询只需要使用上次查询出的数据中的id来获取接下来的数据即可，但这种写法需要业务配合。</p><h4 id="关于null的特别说明" tabindex="-1">关于Null的特别说明 <a class="header-anchor" href="#关于null的特别说明" aria-label="Permalink to &quot;关于Null的特别说明&quot;">​</a></h4><p>对于Null到底算什么，存在着分歧：</p><p>1、有的认为NULL值代表一个未确定的值，MySQL认为任何和NULL值做比较的表达式的值都为NULL，包括select null=null和select null!=null;</p><p><img src="'+ys+'" alt="image.png"><img src="'+_s+'" alt="image.png"></p><p>所以每一个NULL值都是独一无二的。</p><p>2、有的认为其实NULL值在业务上就是代表没有，所有的NULL值和起来算一份；</p><p>3、有的认为这NULL完全没有意义，所以在统计数量时压根儿不能把它们算进来。</p><p>假设一个表中某个列c1的记录为(2,1000,null,null)，在第一种情况下，表中c1的记录数为4，第二种表中c1的记录数为3，第三种表中c1的记录数为2。</p><p><img src="'+vs+'" alt="image.png"></p><p>在对统计索引列不重复值的数量时如何对待NULL值，MySQL专门提供了一个innodb_stats_method的系统变量，</p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_stats_method" target="_blank" rel="noreferrer">https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_stats_method</a></p><p><strong>这个系统变量有三个候选值：</strong></p><p>nulls_equal：认为所有NULL值都是相等的。这个值也是innodb_stats_method的默认值。</p><p>如果某个索引列中NULL值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别多，所以倾向于不使用索引进行访问。</p><p>nulls_unequal：认为所有NULL值都是不相等的。</p><p>如果某个索引列中NULL值特别多的话，这种统计方式会让优化器认为某个列中平均一个值重复次数特别少，所以倾向于使用索引进行访问。</p><p>nulls_ignored：直接把NULL值忽略掉。</p><p>而且有迹象表明，在MySQL5.7.22以后的版本，对这个innodb_stats_method的修改不起作用，MySQL把这个值在代码里写死为nulls_equal。也就是说MySQL在进行索引列的数据统计行为又把null视为第二种情况（NULL值在业务上就是代表没有，所有的NULL值和起来算一份），看起来，MySQL中对Null值的处理也很分裂。所以总的来说，对于列的声明尽可能的不要允许为null。</p>',214))])}const Ss=n(fs,[["render",Ds]]);export{Rs as __pageData,Ss as default};
