import{_ as l,c as i,o as e,a3 as r}from"./chunks/framework.DpPtyC7-.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/0000.索引.md","filePath":"algorithm/0000.索引.md","lastUpdated":1754968605000}'),o={name:"algorithm/0000.索引.md"};function t(h,a,n,d,s,c){return e(),i("div",null,a[0]||(a[0]=[r('<h2 id="排序" tabindex="-1">排序 <a class="header-anchor" href="#排序" aria-label="Permalink to &quot;排序&quot;">​</a></h2><h3 id="比较排序" tabindex="-1">比较排序 <a class="header-anchor" href="#比较排序" aria-label="Permalink to &quot;比较排序&quot;">​</a></h3><ol><li><a href="./0001.冒泡排序">冒泡排序</a></li><li><a href="./0002.选择排序">选择排序</a></li><li><a href="./0003.插入排序">插入排序</a></li></ol><h3 id="不基于比较排序" tabindex="-1">不基于比较排序 <a class="header-anchor" href="#不基于比较排序" aria-label="Permalink to &quot;不基于比较排序&quot;">​</a></h3><ol><li>计数排序: (辅助数组，每个元素的值作为索引，统计每个元素出现的次数，然后从小到大依次放入原数组) <ul><li>适合范围小的整数排序</li><li>时间复杂度O(n+k)，空间复杂度O(k)</li><li>适合范围小的整数排序</li></ul></li><li>桶排序: (将数据分到不同的桶中，然后对每个桶进行排序，最后将桶中的数据合并) <ul><li>适合范围小的整数排序</li><li>时间复杂度O(n+k)，空间复杂度O(n)</li></ul></li><li>基数排序((将数据按位分组，从低位到高位进行排序)) <ul><li>适合范围小的整数排序</li><li>时间复杂度O(n*k)，空间复杂度O(n+k)</li></ul></li></ol><h2 id="二分查找" tabindex="-1">二分查找 <a class="header-anchor" href="#二分查找" aria-label="Permalink to &quot;二分查找&quot;">​</a></h2><ol><li><a href="./0004.有序数组二分查找">有序数组二分查找</a></li></ol><h2 id="异或运算" tabindex="-1">异或运算 <a class="header-anchor" href="#异或运算" aria-label="Permalink to &quot;异或运算&quot;">​</a></h2><blockquote></blockquote><p>参考知识: <a href="./0.基础知识/02.二进制位运算">二进制位运算</a></p><ol><li><a href="./0005.异或运算交换">异或运算交换数值</a></li><li><a href="./0006.异或运算查找唯一出现奇数次的数">异或运算查找唯一出现奇数次的数</a></li><li><a href="./0007.int类型的数的二进制最右侧1的位置">int类型的数的二进制最右侧1的位置</a></li><li><a href="./0008.异或运算查找唯二出现奇数次的数">异或运算查找唯二出现奇数次的数</a></li><li><a href="./0009.异或运算查找唯一出现k次的数">异或运算查找唯一出现k次的数</a></li></ol><h2 id="链表" tabindex="-1">链表 <a class="header-anchor" href="#链表" aria-label="Permalink to &quot;链表&quot;">​</a></h2><ol><li><a href="./0010.单向链表和双线链表结构实现">单向链表和双线链表结构实现</a></li><li><a href="./0011.链表常规操作">链表常规操作</a></li><li><a href="./0012.栈和队列">链表实现栈和队列</a></li></ol><h2 id="堆栈" tabindex="-1">堆栈 <a class="header-anchor" href="#堆栈" aria-label="Permalink to &quot;堆栈&quot;">​</a></h2><ol><li><a href="./0012.栈和队列">栈和队列</a></li><li><a href="./0013.用栈实现队列和用队列实现栈">用栈实现队列和用队列实现栈</a></li></ol><h2 id="前缀树" tabindex="-1">前缀树 <a class="header-anchor" href="#前缀树" aria-label="Permalink to &quot;前缀树&quot;">​</a></h2><ol><li>桶排序</li></ol>',17)]))}const m=l(o,[["render",t]]);export{u as __pageData,m as default};
