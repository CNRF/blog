import{_ as i,c as a,o as n,a3 as l}from"./chunks/framework.Dohe277V.js";const c=JSON.parse('{"title":"10.JUC锁-LockSupport","description":"","frontmatter":{"title":"10.JUC锁-LockSupport","tags":["java","多线程"],"categories":["java","多线程"]},"headers":[],"relativePath":"java/02.多线程和高并发/10.JUC锁-LockSupport.md","filePath":"java/02.多线程和高并发/10.JUC锁-LockSupport.md","lastUpdated":1744524191000}'),t={name:"java/02.多线程和高并发/10.JUC锁-LockSupport.md"};function e(p,s,r,h,k,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h3 id="locksupport-简介" tabindex="-1">LockSupport 简介 <a class="header-anchor" href="#locksupport-简介" aria-label="Permalink to &quot;LockSupport 简介&quot;">​</a></h3><p><code>LockSupport</code>是一个非常方便实现线程阻塞和唤醒的工具类，它可以在线程任意位置让线程阻塞，也可以在任意位置唤醒线程。 <code>LockSupport</code>是一个线程阻塞工具类，它可以在线程任意位置让线程阻塞，也可以在任意位置唤醒线程。<code>LockSupport</code> 是创建锁和其他同步类的基础，它通过调用<code>Unsafe</code>类中的本地方法实现阻塞和唤醒线程。</p><h3 id="locksupport主要方法" tabindex="-1">LockSupport主要方法 <a class="header-anchor" href="#locksupport主要方法" aria-label="Permalink to &quot;LockSupport主要方法&quot;">​</a></h3><ol><li><code>void park()</code>： <ul><li>方法会将当前线程挂起，直到调用<code>unpark</code>方法或者当前线程被中断。</li><li>调用<code>park</code>方法后，当前线程会被挂起，直到其他调用<code>unpark</code>方法或者当前线程被中断。</li><li>该方法不会抛出异常，而且挂起线程是不会消耗CPU资源的。</li><li><code>park</code>方法可以响应中断，但是不会抛出<code>InterruptedException</code>异常。</li></ul></li><li><code>LockSupport.park(Object blocker)</code>： <ul><li>该方法和<code>park</code>方法类似，允许传入一个<code>blocker</code>对象，用于标识线程阻塞对象。</li><li><code>blocker</code>对象是一个用于标识线程阻塞对象的任意对象，可以通过<code>getBlocker</code>方法获取。用于追踪或记录线程阻塞对象。</li></ul></li><li><code>LockSupport.unpark(Thread thread)</code>： <ul><li>该方法用于唤醒指定的线程，使其恢复执行。</li><li>唤醒操作可以在目标线程被挂起之前或者之后调用。如果目标线程已经挂起，它会立即恢复执行；如果目标线程没有被挂起，unpark() 会在后续某次调用 park() 时恢复线程。</li><li>在线程park()前unpark()时，线程不会阻塞，继续执行后续内容</li></ul></li></ol><h2 id="locksupport的使用" tabindex="-1">LockSupport的使用 <a class="header-anchor" href="#locksupport的使用" aria-label="Permalink to &quot;LockSupport的使用&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.locks.LockSupport;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LockSupportExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread workerThread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;工作线程准备挂起&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            LockSupport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">park</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 工作线程挂起</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;工作线程被唤醒，继续执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        workerThread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 模拟主线程的处理，稍等 2 秒后唤醒工作线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;主线程唤醒工作线程&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        LockSupport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unpark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(workerThread);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唤醒工作线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><strong>解释</strong>：</p><ol><li>workerThread 线程首先调用 LockSupport.park() 方法，它会被挂起并等待其他线程唤醒。</li><li>主线程等待 2 秒后，调用 LockSupport.unpark(workerThread) 唤醒 workerThread。</li><li>workerThread 在被唤醒后继续执行。</li></ol><h2 id="locksupport-的特点" tabindex="-1">LockSupport 的特点 <a class="header-anchor" href="#locksupport-的特点" aria-label="Permalink to &quot;LockSupport 的特点&quot;">​</a></h2><ul><li><code>非抢占性</code>：线程会在 park() 方法调用时挂起，直到其他线程显式地调用 unpark() 方法才能继续执行。</li><li><code>不会消耗</code> CPU：与 Thread.sleep() 等方法不同，park() 会让线程处于挂起状态，并且不会浪费 CPU 资源。</li><li><code>灵活性</code>：LockSupport 的设计比 wait/notify 更加灵活，可以在任意时刻挂起和唤醒线程，不依赖于对象锁。</li></ul><h2 id="和其他方法的比较" tabindex="-1">和其他方法的比较 <a class="header-anchor" href="#和其他方法的比较" aria-label="Permalink to &quot;和其他方法的比较&quot;">​</a></h2><h3 id="locksupport和object-wait-的比较" tabindex="-1">LockSupport和Object.wait()的比较 <a class="header-anchor" href="#locksupport和object-wait-的比较" aria-label="Permalink to &quot;LockSupport和Object.wait()的比较&quot;">​</a></h3><p><code>LockSupport</code> 和 <code>Object.wait()</code> 都是用于控制线程的执行，但它们有不同的设计理念和使用场景。下面将详细比较这两者的异同点：</p><table><thead><tr><th>特性</th><th><code>Object.wait()</code></th><th><code>LockSupport.park()</code></th></tr></thead><tbody><tr><td><strong>是否需要锁</strong></td><td>需要在同步方法或同步代码块中调用</td><td>不需要锁，任何线程都可以调用</td></tr><tr><td><strong>线程唤醒机制</strong></td><td>需要通过 <code>notify()</code> 或 <code>notifyAll()</code> 唤醒</td><td>通过 <code>unpark()</code> 唤醒</td></tr><tr><td><strong>线程中断处理</strong></td><td>被中断时抛出 <code>InterruptedException</code></td><td>被中断时抛出 <code>InterruptedException</code></td></tr><tr><td><strong>调用的灵活性</strong></td><td>必须在同步代码块中调用</td><td>可以在任何地方调用</td></tr><tr><td><strong>性能</strong></td><td>可能涉及锁竞争和上下文切换</td><td>通常效率更高，避免了锁竞争</td></tr><tr><td><strong>常见应用</strong></td><td>适用于生产者-消费者、线程协调等场景</td><td>适用于线程池、任务调度、自定义锁等高效并发场景</td></tr></tbody></table><h4 id="_1-线程挂起与唤醒机制" tabindex="-1">1. <strong>线程挂起与唤醒机制</strong> <a class="header-anchor" href="#_1-线程挂起与唤醒机制" aria-label="Permalink to &quot;1. **线程挂起与唤醒机制**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>:</p><ul><li>必须在 <strong>同步代码块</strong> 或 <strong>同步方法</strong> 中调用，调用者必须持有锁。</li><li>调用 <code>wait()</code> 会让当前线程释放锁，并进入等待队列，直到其他线程调用同一对象的 <code>notify()</code> 或 <code>notifyAll()</code> 方法唤醒该线程。</li><li>唤醒时，线程会重新竞争锁，然后继续执行。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>:</p><ul><li><strong>不依赖锁</strong>，任何线程都可以调用 <code>park()</code> 挂起自己。</li><li><code>park()</code> 会使当前线程挂起，并且 <strong>不会释放任何锁</strong>（如果线程当前持有锁），它的行为比 <code>wait()</code> 更独立。</li><li>唤醒线程的操作通过 <code>LockSupport.unpark(Thread thread)</code> 来实现，唤醒时不需要重新竞争锁。</li></ul></li></ul><h4 id="_2-锁的依赖" tabindex="-1">2. <strong>锁的依赖</strong> <a class="header-anchor" href="#_2-锁的依赖" aria-label="Permalink to &quot;2. **锁的依赖**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>必须在获取了监视器锁（即进入同步代码块或同步方法）之后调用，否则会抛出 <code>IllegalMonitorStateException</code> 异常。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li>不需要持有锁，可以在任何地方调用。<code>LockSupport</code> 不依赖于同步块或锁机制，因而它可以在不持有锁的情况下控制线程的挂起与恢复。</li></ul></li></ul><h4 id="_3-线程被唤醒的条件" tabindex="-1">3. <strong>线程被唤醒的条件</strong> <a class="header-anchor" href="#_3-线程被唤醒的条件" aria-label="Permalink to &quot;3. **线程被唤醒的条件**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>线程会被唤醒有两种方式： <ul><li>其他线程调用同一对象的 <code>notify()</code> 或 <code>notifyAll()</code>。</li><li>线程自身被中断（抛出 <code>InterruptedException</code>）。</li></ul></li><li><code>wait()</code> 只能通过 <code>notify</code> 系列方法或者线程中断来唤醒，因此其唤醒机制较为复杂。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li>线程会在 <code>park()</code> 被调用时挂起，直到调用 <code>unpark()</code> 唤醒该线程。</li><li>唤醒时，<code>unpark()</code> 并不要求线程必须已经调用 <code>park()</code>，即使它还没有调用 <code>park()</code>，<code>unpark()</code> 也能保证线程在后续调用 <code>park()</code> 时被唤醒。</li><li>线程被中断时也可以通过 <code>InterruptedException</code> 唤醒。</li></ul></li></ul><h4 id="_4-中断与响应" tabindex="-1">4. <strong>中断与响应</strong> <a class="header-anchor" href="#_4-中断与响应" aria-label="Permalink to &quot;4. **中断与响应**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>当线程在等待时，如果被中断，会抛出 <code>InterruptedException</code> 异常。因此，线程需要处理这种中断异常。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li><code>LockSupport.park()</code> 也响应线程中断。当调用 <code>park()</code> 时，若线程已被中断，会抛出 <code>InterruptedException</code> 异常。</li><li>但它不会自动处理中断异常，调用者可以选择忽略中断，也可以通过捕获 <code>InterruptedException</code> 来中断等待的线程。</li></ul></li></ul><h4 id="_5-适用场景" tabindex="-1">5. <strong>适用场景</strong> <a class="header-anchor" href="#_5-适用场景" aria-label="Permalink to &quot;5. **适用场景**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>通常用于 <strong>基于对象锁</strong> 的并发控制场景，如在多个线程之间协调共享资源时使用。</li><li>适用于生产者-消费者模型等需要线程间协调的场景。</li><li>由于它必须在同步块内调用，使用时需要对锁的管理非常小心。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li>适用于更加灵活的 <strong>线程控制</strong> 场景，尤其在不依赖锁的情况下需要挂起和唤醒线程的场景。</li><li>常用于 <strong>线程池</strong>、<strong>自定义锁</strong>、<strong>线程间协作</strong> 等复杂的并发模型中。</li><li>可以在没有锁的情况下进行线程挂起和恢复，适合于更高效的线程控制。</li></ul></li></ul><h4 id="_6-线程阻塞和唤醒的效率" tabindex="-1">6. <strong>线程阻塞和唤醒的效率</strong> <a class="header-anchor" href="#_6-线程阻塞和唤醒的效率" aria-label="Permalink to &quot;6. **线程阻塞和唤醒的效率**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>当线程调用 <code>wait()</code> 时，必须释放对象锁，等待其他线程通过 <code>notify()</code> 或 <code>notifyAll()</code> 唤醒。</li><li>唤醒时，唤醒的线程会竞争对象锁，可能引起上下文切换和锁竞争。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li>相较于 <code>wait()</code>，<code>LockSupport</code> 在内部实现上更加高效，能够避免锁竞争和上下文切换。</li><li><code>park()</code> 方法不会释放任何锁，也不依赖锁的持有，性能上通常优于 <code>wait()</code>。</li></ul></li></ul><h4 id="_7-与-notify-notifyall-的区别" tabindex="-1">7. <strong>与 <code>notify()</code>/<code>notifyAll()</code> 的区别</strong> <a class="header-anchor" href="#_7-与-notify-notifyall-的区别" aria-label="Permalink to &quot;7. **与 \`notify()\`/\`notifyAll()\` 的区别**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>需要配合 <code>notify()</code> 或 <code>notifyAll()</code> 来唤醒被 <code>wait()</code> 阻塞的线程，必须依赖于同一个锁对象。</li><li>如果没有正确调用 <code>notify()</code> 或 <code>notifyAll()</code>，线程可能会永远阻塞。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li>唤醒线程仅依赖于 <code>unpark()</code>，不需要依赖其他线程的通知，可以更加灵活和精确。</li><li><code>unpark()</code> 可以在线程挂起前或后调用，因此它比 <code>notify()</code> 更加灵活。</li></ul></li></ul><h3 id="object-wait-和condition-await-的区别" tabindex="-1">Object.wait()和Condition.await()的区别 <a class="header-anchor" href="#object-wait-和condition-await-的区别" aria-label="Permalink to &quot;Object.wait()和Condition.await()的区别&quot;">​</a></h3><p><code>Object.wait()</code> 和 <code>Condition.await()</code> 都是用来使线程进入等待状态，并且需要其他线程通过某种方式唤醒它们。这两者有许多相似之处，但也有一些关键的区别。下面我们将详细比较 <code>Object.wait()</code> 和 <code>Condition.await()</code> 的不同之处。</p><table><thead><tr><th>特性</th><th><code>Object.wait()</code></th><th><code>Condition.await()</code></th></tr></thead><tbody><tr><td><strong>所属类</strong></td><td><code>Object</code>（基于监视器锁）</td><td><code>Condition</code>（基于显式锁 <code>Lock</code>）</td></tr><tr><td><strong>调用要求</strong></td><td>必须在同步代码块中调用，持有对象锁</td><td>必须在持有 <code>Lock</code> 锁后调用</td></tr><tr><td><strong>线程唤醒机制</strong></td><td>依赖于 <code>notify()</code> 和 <code>notifyAll()</code></td><td>依赖于 <code>signal()</code> 和 <code>signalAll()</code></td></tr><tr><td><strong>多条件支持</strong></td><td>不支持</td><td>支持多个条件，能管理不同的等待队列</td></tr><tr><td><strong>性能</strong></td><td>在高并发场景中可能会有锁竞争和性能瓶颈</td><td>提供更高效和灵活的线程同步机制</td></tr><tr><td><strong>常见应用场景</strong></td><td>简单的线程同步，适用于传统的对象锁和条件变量</td><td>复杂的并发控制，尤其是多条件、多线程协作的场景</td></tr></tbody></table><h4 id="_1-所属类与同步方式" tabindex="-1">1. <strong>所属类与同步方式</strong> <a class="header-anchor" href="#_1-所属类与同步方式" aria-label="Permalink to &quot;1. **所属类与同步方式**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li><code>Object.wait()</code> 是 <code>Object</code> 类的一部分，每个 Java 对象都可以调用 <code>wait()</code> 方法。因此，它是基于 <strong>监视器锁</strong> （也称为对象锁）来工作的，调用 <code>wait()</code> 必须持有该对象的锁（即在 <code>synchronized</code> 块内调用）。</li><li>只有在同步代码块中才能调用 <code>wait()</code>，并且在调用 <code>wait()</code> 后，线程会释放当前持有的对象锁。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li><code>Condition.await()</code> 是 <code>java.util.concurrent.locks.Condition</code> 接口的一部分，<code>Condition</code> 是 <code>java.util.concurrent.locks.Lock</code> 接口的一部分，通常与显式的锁（例如 <code>ReentrantLock</code>）一起使用。</li><li>它不依赖于对象锁，而是依赖于 <code>Lock</code> 对象，因此在调用 <code>await()</code> 时，需要先获取 <code>Lock</code> 锁。</li></ul></li></ul><h4 id="_2-调用条件与锁的要求" tabindex="-1">2. <strong>调用条件与锁的要求</strong> <a class="header-anchor" href="#_2-调用条件与锁的要求" aria-label="Permalink to &quot;2. **调用条件与锁的要求**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>必须在持有锁的情况下调用。即调用 <code>wait()</code> 时，线程必须先获取该对象的监视器锁（通过 <code>synchronized</code> 关键字），否则会抛出 <code>IllegalMonitorStateException</code>。</li><li><code>wait()</code> 释放当前锁并使线程进入等待状态，直到被其他线程通过 <code>notify()</code> 或 <code>notifyAll()</code> 唤醒。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li>必须在获得 <code>Lock</code> 锁后调用。与 <code>Object.wait()</code> 不同，<code>await()</code> 是通过 <code>Lock</code> 来管理线程的同步，而不是基于对象的监视器锁。</li><li><code>await()</code> 会释放 <code>Lock</code>，并使当前线程进入等待状态，直到被其他线程通过 <code>signal()</code> 或 <code>signalAll()</code> 唤醒。</li></ul></li></ul><h4 id="_3-唤醒机制" tabindex="-1">3. <strong>唤醒机制</strong> <a class="header-anchor" href="#_3-唤醒机制" aria-label="Permalink to &quot;3. **唤醒机制**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>唤醒机制依赖于 <code>notify()</code> 和 <code>notifyAll()</code>。其中： <ul><li><code>notify()</code> 唤醒一个正在等待该对象锁的线程。</li><li><code>notifyAll()</code> 唤醒所有等待该对象锁的线程。</li></ul></li><li>唤醒的线程必须重新竞争锁，因此可能会发生上下文切换和锁竞争。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li>唤醒机制依赖于 <code>signal()</code> 和 <code>signalAll()</code>： <ul><li><code>signal()</code> 唤醒一个等待该条件的线程。</li><li><code>signalAll()</code> 唤醒所有等待该条件的线程。</li></ul></li><li>唤醒的线程在继续执行前需要重新获得 <code>Lock</code>，因此 <code>Condition</code> 提供了一种更明确的控制方式。</li></ul></li></ul><h4 id="_4-多条件支持" tabindex="-1">4. <strong>多条件支持</strong> <a class="header-anchor" href="#_4-多条件支持" aria-label="Permalink to &quot;4. **多条件支持**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li><code>Object.wait()</code> 只能针对一个对象进行等待操作，因此它不能像 <code>Condition</code> 那样进行多条件的管理。在一个锁对象上只能等待并唤醒单一的条件。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li><code>Condition</code> 允许每个 <code>Lock</code> 对象有多个条件变量（即多个 <code>Condition</code> 实例）。这意味着一个锁对象可以有多个不同的等待队列，每个 <code>Condition</code> 可以有独立的 <code>await()</code> 和 <code>signal()</code> 操作。</li><li>这使得 <code>Condition</code> 比 <code>Object.wait()</code> 更适用于更复杂的同步场景，比如生产者-消费者模型中的多条件控制。</li></ul></li></ul><h4 id="_5-性能与灵活性" tabindex="-1">5. <strong>性能与灵活性</strong> <a class="header-anchor" href="#_5-性能与灵活性" aria-label="Permalink to &quot;5. **性能与灵活性**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li><code>wait()</code> 是基于传统的同步机制（即锁和条件变量），在多线程竞争时容易发生锁竞争和上下文切换，性能上可能不如 <code>Condition</code>。</li><li>对于复杂的同步场景，<code>wait()</code> 可能导致程序结构较为复杂，因为它只能依赖于一个锁对象，并且不能灵活地管理多个条件。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li><code>Condition</code> 是为显式锁设计的，它提供了比 <code>wait()</code> 更加灵活的控制机制，能够管理多个不同的条件，因此在复杂的并发场景中， <code>Condition</code> 更有优势。</li><li><code>Condition</code> 提供了更好的性能控制，特别是在高并发情况下，它避免了不必要的锁竞争。</li></ul></li></ul><h4 id="_6-中断与异常处理" tabindex="-1">6. <strong>中断与异常处理</strong> <a class="header-anchor" href="#_6-中断与异常处理" aria-label="Permalink to &quot;6. **中断与异常处理**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>在调用 <code>wait()</code> 时，如果线程被中断，会抛出 <code>InterruptedException</code> 异常。线程需要处理这个异常。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li><code>Condition.await()</code> 也会抛出 <code>InterruptedException</code>，当线程在等待时被中断时，<code>await()</code> 会抛出异常，线程同样需要处理这个异常。</li><li>另外，<code>Condition</code> 提供的 <code>await(long time, TimeUnit unit)</code> 和 <code>awaitUntil(Date deadline)</code> 方法，允许线程在特定的时间或时间段内等待，这些方法对于处理超时操作更为方便。</li></ul></li></ul><h4 id="_7-常见应用场景" tabindex="-1">7. <strong>常见应用场景</strong> <a class="header-anchor" href="#_7-常见应用场景" aria-label="Permalink to &quot;7. **常见应用场景**&quot;">​</a></h4><ul><li><p><strong><code>Object.wait()</code></strong>：</p><ul><li>适用于传统的线程同步模型，特别是在需要对象锁的简单线程同步场景下，比如生产者-消费者模型、生产者消费者队列等。</li><li>适用于不需要显式锁的简单同步场景。</li></ul></li><li><p><strong><code>Condition.await()</code></strong>：</p><ul><li>适用于需要显式锁（如 <code>ReentrantLock</code>）的复杂并发场景，比如多条件的线程协调、并发容器的管理等。</li><li><code>Condition</code> 适合处理复杂的并发任务，尤其是涉及多个线程需要在不同条件下等待和唤醒的场景。</li></ul></li></ul><h4 id="_8-示例代码对比" tabindex="-1">8. <strong>示例代码对比</strong> <a class="header-anchor" href="#_8-示例代码对比" aria-label="Permalink to &quot;8. **示例代码对比**&quot;">​</a></h4><h5 id="使用-object-wait-示例" tabindex="-1">使用 <code>Object.wait()</code> 示例： <a class="header-anchor" href="#使用-object-wait-示例" aria-label="Permalink to &quot;使用 \`Object.wait()\` 示例：&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WaitNotifyExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lock) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread is waiting...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wait</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待被唤醒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread resumed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 主线程稍等并唤醒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lock) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Main thread notifying.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唤醒等待的线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h5 id="使用-condition-await-示例" tabindex="-1">使用 <code>Condition.await()</code> 示例： <a class="header-anchor" href="#使用-condition-await-示例" aria-label="Permalink to &quot;使用 \`Condition.await()\` 示例：&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConditionExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ReentrantLock lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReentrantLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Condition condition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread is waiting...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                condition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待被唤醒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread resumed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread was interrupted.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 恢复中断状态</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 主线程稍等并唤醒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Main thread signaling.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            condition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唤醒等待的线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            lock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="thread-sleep-和locksupport-park-的区别" tabindex="-1">Thread.sleep()和LockSupport.park()的区别 <a class="header-anchor" href="#thread-sleep-和locksupport-park-的区别" aria-label="Permalink to &quot;Thread.sleep()和LockSupport.park()的区别&quot;">​</a></h3><p><code>Thread.sleep()</code> 和 <code>LockSupport.park()</code> 都是用来使线程暂停执行，但它们的设计初衷、行为以及适用场景有很大的不同。下面是它们之间的详细对比。</p><table><thead><tr><th>特性</th><th><code>Thread.sleep()</code></th><th><code>LockSupport.park()</code></th></tr></thead><tbody><tr><td><strong>是否定时挂起</strong></td><td>是，可以精确指定挂起时间</td><td>否，挂起直到显式唤醒</td></tr><tr><td><strong>是否释放锁</strong></td><td>会释放当前持有的锁</td><td>不会释放当前持有的锁</td></tr><tr><td><strong>唤醒机制</strong></td><td>基于时间，自动恢复</td><td>基于显式唤醒，其他线程调用 <code>unpark()</code> 唤醒</td></tr><tr><td><strong>响应中断</strong></td><td>会响应中断并抛出 <code>InterruptedException</code></td><td>会响应中断并抛出 <code>InterruptedException</code></td></tr><tr><td><strong>使用场景</strong></td><td>定时任务、延迟、定时重试等</td><td>线程间协调、线程池、复杂的并发控制等</td></tr><tr><td><strong>灵活性</strong></td><td>较低，只能固定时间挂起</td><td>较高，可以在任意时刻唤醒线程</td></tr><tr><td><strong>性能</strong></td><td>在高频调用时可能会有较大性能开销</td><td>在高频调用时通常性能较优，避免不必要的上下文切换</td></tr></tbody></table><h4 id="_1-线程挂起机制" tabindex="-1">1. <strong>线程挂起机制</strong> <a class="header-anchor" href="#_1-线程挂起机制" aria-label="Permalink to &quot;1. **线程挂起机制**&quot;">​</a></h4><ul><li><p><strong><code>Thread.sleep()</code></strong>：</p><ul><li><code>sleep()</code> 是让当前线程暂停执行一段指定的时间。线程在执行 <code>sleep()</code> 时会被挂起，并且 <strong>始终会释放当前持有的锁</strong> ，即使它是在同步代码块中调用的。</li><li>线程挂起的时间是 <strong>固定的</strong>，即使你传递的时间值很小，线程仍然会暂停至少那么长时间。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li><code>park()</code> 方法会使当前线程挂起，直到被显式唤醒。线程调用 <code>park()</code> 后会被阻塞，直到另一个线程调用 <code>LockSupport.unpark(Thread thread)</code> 唤醒它。</li><li><code>park()</code> 是一个 <strong>非定时的</strong> 挂起机制，线程可以一直等待，直到被 <code>unpark()</code> 唤醒，或者中断。</li><li>调用 <code>park()</code> 时，线程 <strong>不会释放锁</strong>，如果它正在持有锁，其他线程仍然无法获取该锁。</li></ul></li></ul><h4 id="_2-是否可以响应中断" tabindex="-1">2. <strong>是否可以响应中断</strong> <a class="header-anchor" href="#_2-是否可以响应中断" aria-label="Permalink to &quot;2. **是否可以响应中断**&quot;">​</a></h4><ul><li><p><strong><code>Thread.sleep()</code></strong>：</p><ul><li><code>sleep()</code> 是响应中断的。当线程在 <code>sleep()</code> 中被中断时，它会抛出一个 <code>InterruptedException</code> 异常。</li><li>如果 <code>sleep()</code> 时间已经过了，即使线程被中断，<code>sleep()</code> 也会返回并继续执行。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li><code>park()</code> 也可以响应线程中断。如果线程在调用 <code>park()</code> 时被中断，它会抛出 <code>InterruptedException</code> 异常。</li><li>线程可以通过捕获 <code>InterruptedException</code> 来处理中断，或选择忽略中断。</li></ul></li></ul><h4 id="_3-可定时挂起" tabindex="-1">3. <strong>可定时挂起</strong> <a class="header-anchor" href="#_3-可定时挂起" aria-label="Permalink to &quot;3. **可定时挂起**&quot;">​</a></h4><ul><li><p><strong><code>Thread.sleep()</code></strong>：</p><ul><li><code>sleep()</code> 会使线程挂起指定的时间段，可以精确地控制线程暂停的时间。</li><li>示例：<code>Thread.sleep(1000)</code> 会让线程挂起 1000 毫秒。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li><code>park()</code> 不能直接控制线程挂起的时间。它会使线程一直挂起，直到被其他线程显式地调用 <code>unpark()</code> 唤醒。</li><li>如果需要定时挂起，可以使用 <code>LockSupport.parkNanos()</code> 或 <code>LockSupport.parkUntil()</code> 方法，分别允许以纳秒或指定时间点为单位控制挂起时长。</li></ul></li></ul><h4 id="_4-线程唤醒机制" tabindex="-1">4. <strong>线程唤醒机制</strong> <a class="header-anchor" href="#_4-线程唤醒机制" aria-label="Permalink to &quot;4. **线程唤醒机制**&quot;">​</a></h4><ul><li><p><strong><code>Thread.sleep()</code></strong>：</p><ul><li><code>sleep()</code> 唤醒的机制是基于时间。线程会在指定时间过去之后自动恢复执行，即使没有其他线程干预。</li><li>唤醒机制与中断相关，<code>sleep()</code> 可以被中断来提前唤醒，但它没有显式的 <code>unpark()</code> 或类似的线程唤醒机制。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li><code>park()</code> 是基于显式唤醒的。线程需要被其他线程通过调用 <code>LockSupport.unpark(Thread thread)</code> 显式唤醒。这使得 <code>park()</code> 更加灵活，可以在任意时刻唤醒线程，而不仅仅依赖于时间。</li><li><code>unpark()</code> 可以在 <code>park()</code> 调用前或后进行调用，能够精确控制线程的唤醒。</li></ul></li></ul><h4 id="_5-锁的释放与持有" tabindex="-1">5. <strong>锁的释放与持有</strong> <a class="header-anchor" href="#_5-锁的释放与持有" aria-label="Permalink to &quot;5. **锁的释放与持有**&quot;">​</a></h4><ul><li><p><strong><code>Thread.sleep()</code></strong>：</p><ul><li>当线程调用 <code>sleep()</code> 时，线程 <strong>释放当前持有的锁</strong>。如果线程在同步代码块中调用 <code>sleep()</code>，它会释放该锁，允许其他线程获取锁。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li><code>park()</code> 不会释放当前线程持有的锁。如果线程在同步代码块中调用 <code>park()</code>，它仍然持有锁，其他线程无法获取该锁，直到该线程被唤醒并释放锁。</li></ul></li></ul><h4 id="_6-适用场景" tabindex="-1">6. <strong>适用场景</strong> <a class="header-anchor" href="#_6-适用场景" aria-label="Permalink to &quot;6. **适用场景**&quot;">​</a></h4><ul><li><p><strong><code>Thread.sleep()</code></strong>：</p><ul><li>适用于需要让线程在固定的时间段内暂停执行的场景，如定时任务、模拟延迟、创建时间间隔等。</li><li>由于其简单性，<code>sleep()</code> 常用于那些只需线程暂停一段时间的情况。</li></ul></li><li><p><strong><code>LockSupport.park()</code></strong>：</p><ul><li>适用于 <strong>线程间协调与同步</strong> 的场景，特别是在自定义锁或线程池实现中。它允许更加灵活和精确的线程挂起和唤醒控制。</li><li>适合用于 <strong>非定时挂起</strong> 的场景，如在某些并发控制中，线程可能需要等待其他线程的通知或执行某些操作才能继续。</li></ul></li></ul><h4 id="_7-api-示例" tabindex="-1">7. <strong>API 示例</strong> <a class="header-anchor" href="#_7-api-示例" aria-label="Permalink to &quot;7. **API 示例**&quot;">​</a></h4><h5 id="thread-sleep-示例" tabindex="-1"><code>Thread.sleep()</code> 示例： <a class="header-anchor" href="#thread-sleep-示例" aria-label="Permalink to &quot;\`Thread.sleep()\` 示例：&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SleepExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread will sleep for 2 seconds.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 让线程暂停 2 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread woke up.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="locksupport-park-示例" tabindex="-1"><code>LockSupport.park()</code> 示例： <a class="header-anchor" href="#locksupport-park-示例" aria-label="Permalink to &quot;\`LockSupport.park()\` 示例：&quot;">​</a></h5><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.locks.LockSupport;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LockSupportExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread workerThread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Worker thread is going to park.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            LockSupport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">park</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 线程会在这里被挂起，直到被唤醒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Worker thread resumed.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        workerThread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 主线程等待 2 秒后唤醒 workerThread</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Main thread unblocking worker thread.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        LockSupport.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unpark</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(workerThread);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 唤醒 workerThread</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,70)]))}const E=i(t,[["render",e]]);export{c as __pageData,E as default};
