import{_ as l,D as p,c as e,o as t,a3 as a,m as h,a as i,H as k,w as r}from"./chunks/framework.DY6izP8J.js";const E="/blog/assets/01ebab02af5e41ae979e7ed2d765c6bd.D3A-2_C4.png",d="/blog/assets/42a87aa1aedd4c9c8b26c22f076c49a6.DLfAIlxa.png",o="/blog/assets/7dae7d1284d14983bdc7aa5cbf612b8c.CMveJUJp.png",A=JSON.parse('{"title":"05.volatile关键字","description":"","frontmatter":{"title":"05.volatile关键字","tags":["java","多线程"],"categories":["java","多线程"]},"headers":[],"relativePath":"java/02.多线程和高并发/05.volatile关键字.md","filePath":"java/02.多线程和高并发/05.volatile关键字.md","lastUpdated":1752895537000}'),c={name:"java/02.多线程和高并发/05.volatile关键字.md"};function g(y,s,b,u,F,m){const n=p("font");return t(),e("div",null,[s[3]||(s[3]=a(`<h2 id="volatile的作用详解" tabindex="-1">volatile的作用详解 <a class="header-anchor" href="#volatile的作用详解" aria-label="Permalink to &quot;volatile的作用详解&quot;">​</a></h2><h3 id="防重排序" tabindex="-1">防重排序 <a class="header-anchor" href="#防重排序" aria-label="Permalink to &quot;防重排序&quot;">​</a></h3><p>volatile关键字可以防止指令重排序，保证指令的有序性。 单例模式中的双重检查锁定模式就是volatile关键字的一个典型应用。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> volatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton singleton;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     * 构造函数私有，禁止外部实例化</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Singleton </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singleton.class) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (singleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    singleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Singleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleton;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>对象实例化的过程</p><ol><li>分配内存空间</li><li>初始化对象</li><li>将对象指向刚分配的内存空间</li></ol>`,6)),h("p",null,[s[1]||(s[1]=i("如果不加volatile关键字，")),k(n,{color:"red"},{default:r(()=>s[0]||(s[0]=[i("可能会发生指令重排序，导致步骤2和步骤3的顺序颠倒，")])),_:1,__:[0]}),s[2]||(s[2]=i(" 导致singleton对象还没有初始化完成，就被其他线程使用。"))]),s[4]||(s[4]=a(`<h3 id="volatile的内存可见性" tabindex="-1">volatile的内存可见性 <a class="header-anchor" href="#volatile的内存可见性" aria-label="Permalink to &quot;volatile的内存可见性&quot;">​</a></h3><p>volatile关键字保证了线程之间的可见性，当一个线程修改了共享变量的值，其他线程能够立即看到修改后的值。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestVolatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Thread-A</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stop) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; stopped&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Thread-main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            TimeUnit.SECONDS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; after 1 seconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p>上述代码Thread-A会一直运行, 在变量stop未添加volatile关键字时，Thread-A线程无法感知到stop变量的变化，导致Thread-A线程无法停止。 在给变量添加volatile关键字之后，Thread-A能正常感知到stop变量的变化，从而停止运行。</p></blockquote><h3 id="volatile的原子性-单次读-写操作" tabindex="-1">volatile的原子性：单次读/写操作 <a class="header-anchor" href="#volatile的原子性-单次读-写操作" aria-label="Permalink to &quot;volatile的原子性：单次读/写操作&quot;">​</a></h3><p>volatile关键字保证了变量的单次读/写操作的原子性，但是不能保证复合操作的原子性。</p><h4 id="i-的原子性问题" tabindex="-1">i++的原子性问题 <a class="header-anchor" href="#i-的原子性问题" aria-label="Permalink to &quot;i++的原子性问题&quot;">​</a></h4><div class="tip custom-block"><p class="custom-block-title">提示</p><p>电脑配置过高的时候，出现的概率会比较小，因为线程执行的速度比较快，线程执行完毕后，CPU会将线程的数据刷新到主存中。 可以调整循环次数，增加循环中的线程休眠时间，增加线程执行时间，增加出现的概率。</p></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestPlusVolatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    volatile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        TestPlusVolatile testPlusVolatile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestPlusVolatile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                testPlusVolatile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 等待所有线程执行完毕</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testPlusVolatile.n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><blockquote><p>上述代码中，volatile关键字保证了变量n的可见性，但是不能保证复合操作的原子性，导致最终输出的结果不是1000。 如果想要保证原子性，可以使用synchronized关键字或者AtomicInteger类。</p></blockquote><h4 id="共享的long和double变量的原子性问题" tabindex="-1">共享的long和double变量的原子性问题 <a class="header-anchor" href="#共享的long和double变量的原子性问题" aria-label="Permalink to &quot;共享的long和double变量的原子性问题&quot;">​</a></h4><p>在Java中，long 和 double 类型是 64 位的，而 JVM 规范中并没有强制要求 64 位数据的读写操作必须是原子性的。这意味着，对一个 long 或 double 变量的读写操作，JVM 可能会将其拆分成两个 32 位的操作来执行。</p><blockquote><p>部分商用虚拟机选择将64位数据的读写操作拆分成两个32位的操作，这样可以提高性能。 也就是说，long 和 double 类型的变量不具备原子性。</p></blockquote><blockquote><p>存在部分虚拟机将64位操作作为原子性操作，但是不具有可移植性。</p></blockquote><p>假设有两个线程 A 和 B 同时操作一个共享的 long 变量 x。</p><ul><li>线程 A 执行 x = 0xFFFFFFFFFFFFFFFFL; (写入操作)</li><li>线程 B 执行 long y = x; (读取操作) 由于写入操作可能被拆分成两个 32 位的操作，例如：</li></ul><ol><li>先写入高 32 位：0xFFFFFFFF</li><li>后写入低 32 位：0xFFFFFFFF 如果线程 B 在线程 A 写入高 32 位之后、写入低 32 位之前读取 x 的值，那么线程 B 读取到的值将会是高 32 位为 0xFFFFFFFF，低 32 位为旧值的组合，导致读取到的数据是错误的。<strong>这种情况被称为“字撕裂”（word tearing)</strong>。</li></ol><blockquote><ul><li>volatile 只能保证单个 long 或 double 变量读写操作的原子性，不能保证复合操作的原子性。例如，x++ 操作虽然是对 long 变量的操作，但它实际上包含读取、加 1、写入三个步骤，这三个步骤不是原子的，因此不能使用 volatile 来保证其原子性。对于复合操作，需要使用 synchronized、Lock 或 AtomicLong 等原子类来保证线程安全。</li></ul></blockquote><blockquote><ul><li>虽然 volatile 可以保证 long 和 double 的原子性，但在大多数情况下，使用 AtomicLong 和 AtomicDouble 等原子类是更好的选择，因为它们提供了更丰富的原子操作，例如原子递增、原子递减等。</li></ul></blockquote><h2 id="volatile的实现原理" tabindex="-1">volatile的实现原理 <a class="header-anchor" href="#volatile的实现原理" aria-label="Permalink to &quot;volatile的实现原理&quot;">​</a></h2><blockquote><p><code>volatile</code> 通过内存屏障和 MESI 缓存一致性协议的配合，实现了可见性</p></blockquote><h3 id="_1-内存屏障-memory-barriers-memory-fences" tabindex="-1">1. 内存屏障（Memory Barriers/Memory Fences） <a class="header-anchor" href="#_1-内存屏障-memory-barriers-memory-fences" aria-label="Permalink to &quot;1. 内存屏障（Memory Barriers/Memory Fences）&quot;">​</a></h3><p>这是 <code>volatile</code> 实现可见性的核心机制。内存屏障是一种 CPU 指令，它会强制执行 CPU 缓存和主内存之间的数据同步。<code>volatile</code> 关键字会在读写操作前后插入内存屏障，具体来说：</p><ul><li><strong>写操作前插入 StoreStore 屏障：</strong> 禁止处理器将写操作重排序到屏障之前。</li><li><strong>写操作后插入 StoreLoad 屏障：</strong> 强制将缓存中的数据刷新到主内存中，并使其他处理器缓存中该变量的副本失效。</li><li><strong>读操作后插入 LoadLoad 屏障：</strong> 禁止处理器将读操作重排序到屏障之后。</li><li><strong>读操作前插入 LoadStore 屏障：</strong> 强制从主内存中读取最新的值，而不是从处理器的缓存中读取。</li></ul><p>通过这些屏障，<code>volatile</code> 保证了：</p><ul><li><strong>写 <code>volatile</code> 变量时，强制将修改后的值立即刷新到主内存。</strong></li><li><strong>读 <code>volatile</code> 变量时，强制从主内存中读取最新的值。</strong></li></ul><p>这样，所有线程都可以立即看到 <code>volatile</code> 变量的最新值，从而保证了可见性。</p><h3 id="_2-mesi-缓存一致性协议" tabindex="-1">2. MESI 缓存一致性协议 <a class="header-anchor" href="#_2-mesi-缓存一致性协议" aria-label="Permalink to &quot;2. MESI 缓存一致性协议&quot;">​</a></h3><p>MESI 是一种缓存一致性协议，用于维护多个 CPU 缓存之间的数据一致性。当一个 CPU 修改了缓存中的数据时，MESI 协议会通知其他 CPU，使它们缓存中相应的数据失效或更新。</p><p><code>volatile</code> 与 MESI 协议结合使用，可以进一步增强可见性：</p><ul><li>当一个线程写入 <code>volatile</code> 变量并刷新到主内存时，MESI 协议会使其他线程缓存中该变量的副本失效。</li><li>当其他线程再次读取该 <code>volatile</code> 变量时，由于缓存已失效，它们会强制从主内存中重新加载最新的值。</li></ul><p><strong>具体实现细节</strong></p><p>在 JVM 层面，<code>volatile</code> 的实现依赖于底层的操作系统和硬件。HotSpot 虚拟机使用 C++ 实现，它利用了操作系统提供的内存屏障指令。</p><p>在汇编层面，<code>volatile</code> 的写操作通常会使用 <code>lock</code> 前缀指令。这个指令有以下作用：</p><ul><li>锁定缓存行： 确保只有一个处理器可以修改该缓存行的数据。</li><li>立即将修改后的数据写回主内存。</li><li>通过 MESI 协议使其他处理器缓存中该缓存行的数据失效。</li></ul><h3 id="_3-禁止指令重排序实现有序" tabindex="-1">3. 禁止指令重排序实现有序 <a class="header-anchor" href="#_3-禁止指令重排序实现有序" aria-label="Permalink to &quot;3. 禁止指令重排序实现有序&quot;">​</a></h3><p>为了性能优化，JMM 在不改变正确语义的前提下，会允许编译器和处理器对指令序列进行重排序。JMM 提供了内存屏障阻止这种重排序。Java 编译器会在生成指令系列时在适当的位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM 会针对编译器制定 volatile 重排序规则表。</p><p><img src="`+E+'" alt="volatile重排序规则"></p><p>&quot; NO &quot; 表示禁止重排序。为了实现 volatile 内存语义时，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎是不可能的，为此，JMM 采取了保守的策略。</p><ul><li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li><li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障。</li><li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li></ul><p>volatile 写是在前面和后面分别插入内存屏障，而 volatile 读操作是在后面插入两个内存屏障。</p><table><thead><tr><th>内存屏障</th><th>说明</th></tr></thead><tbody><tr><td>StoreStore</td><td>禁止 StoreLoad 和 StoreStore 重排序</td></tr><tr><td>StoreLoad</td><td>禁止 StoreLoad 和 LoadLoad 重排序</td></tr><tr><td>LoadLoad</td><td>禁止 LoadLoad 重排序</td></tr><tr><td>LoadStore</td><td>禁止 LoadStore 和 LoadLoad 重排序</td></tr></tbody></table><p><img src="'+d+'" alt=""><img src="'+o+'" alt=""></p>',43))])}const D=l(c,[["render",g]]);export{A as __pageData,D as default};
