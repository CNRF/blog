import{_ as t,E as e,c as p,m as s,J as n,w as l,a5 as h,a,o as r}from"./chunks/framework.BV-pm6eq.js";const k="/blog/assets/05.%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-1713281212977.C_lkeSE_.png",d="/blog/assets/05.%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-1713281227204.KNu-i-bC.png",o="/blog/assets/05.%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-1713281252339.FoF0le-C.png",g="/blog/assets/05.%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1-1713281308621.7NDK75PV.png",x=JSON.parse('{"title":"05.类和对象","description":"","frontmatter":{"title":"05.类和对象","tags":["java"],"categories":["java"]},"headers":[],"relativePath":"java/01.java基础/05.类和对象.md","filePath":"java/01.java基础/05.类和对象.md","lastUpdated":1724049613000}'),E={name:"java/01.java基础/05.类和对象.md"},c=h(`<h2 id="面向对象思想" tabindex="-1">面向对象思想 <a class="header-anchor" href="#面向对象思想" aria-label="Permalink to &quot;面向对象思想&quot;">​</a></h2><h3 id="面向对象思想概述" tabindex="-1">面向对象思想概述 <a class="header-anchor" href="#面向对象思想概述" aria-label="Permalink to &quot;面向对象思想概述&quot;">​</a></h3><h4 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h4><p>Java语言是一种面向对象的程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用Java语言去设计、开发计算机程序。 这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，描述成计算机事件的设计思想。 它区别于面向过程思想，强调的是通过调用对象的行为来实现功能，而不是自己一步一步的去 操作实现。</p><h4 id="面向对象和面向过程区别" tabindex="-1">面向对象和面向过程区别 <a class="header-anchor" href="#面向对象和面向过程区别" aria-label="Permalink to &quot;面向对象和面向过程区别&quot;">​</a></h4><p><strong>举例</strong>：洗衣服</p><ul><li>面向过程：把衣服脱下来 --&gt;找一个盆--&gt;放点洗衣粉--&gt;加点水--&gt;浸泡10分钟--&gt;揉一揉--&gt;清洗衣服--&gt;拧干--&gt;晾起来</li><li>面向对象：把衣服脱下来 --&gt;打开全自动洗衣机--&gt;扔衣服--&gt;按钮--&gt;晾起来</li></ul><p><strong>区别</strong></p><ul><li>面向过程：强调步骤。</li><li>面向对象：强调对象，这里的对象就是洗衣机。</li></ul><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><p>面向对象思想是一种更符合我们思考习惯的思想，它可以将复杂的事情简单化，并将我们从执行者变成了指挥者。面向对象的语言中，包含了三大基本特征，<strong>即封装、继承和多态</strong></p><h2 id="类和对象" tabindex="-1">类和对象 <a class="header-anchor" href="#类和对象" aria-label="Permalink to &quot;类和对象&quot;">​</a></h2><h3 id="什么是类" tabindex="-1">什么是类 <a class="header-anchor" href="#什么是类" aria-label="Permalink to &quot;什么是类&quot;">​</a></h3><ul><li><strong>类</strong> ：是一组相关<strong>属性</strong>和<strong>行为</strong>的集合。可以看成是一类事物的模板，使用事物的属性特征和行为特征来描述该类事物。</li></ul><p><strong>现实中，描述一类事物：</strong></p><ul><li><strong>属性</strong> ：就是该事物的状态信息。</li><li><strong>行为</strong> ：就是该事物能够做什么</li></ul><p><strong>举例</strong>：小猫。 属性：名字、体重、年龄、颜色。 行为：走、跑、叫。</p><h3 id="什么是对象" tabindex="-1">什么是对象 <a class="header-anchor" href="#什么是对象" aria-label="Permalink to &quot;什么是对象&quot;">​</a></h3><ul><li><strong>对象</strong> ：是一类事物的具体体现。对象是类的一个实例（对象并不是找个女朋友），必然具备该类事物的属性和行为。</li></ul><p>现实中，一类事物的一个实例：一只小猫。 举例：一只小猫。 属性：tom、5kg、2 years、yellow。 行为：溜墙根走、蹦跶的跑、喵喵叫。</p><h3 id="类与对象的关系" tabindex="-1">类与对象的关系 <a class="header-anchor" href="#类与对象的关系" aria-label="Permalink to &quot;类与对象的关系&quot;">​</a></h3><ul><li>类是对一类事物的描述，是 <strong>抽象</strong>的。</li><li>对象是一类事物的实例，是 <strong>具体</strong>的。</li><li><strong>类是对象的模板，对象是类的实体</strong></li></ul><p>类的定义</p><h3 id="事物与类的对比" tabindex="-1">事物与类的对比 <a class="header-anchor" href="#事物与类的对比" aria-label="Permalink to &quot;事物与类的对比&quot;">​</a></h3><p>现实世界的一类事物：</p><p><strong>属性</strong>：事物的状态信息。 <strong>行为</strong>：事物能够做什么。</p><p>Java中用class描述事物也是如此：</p><p><strong>成员变量</strong>：对应事物的<strong>属性</strong></p><p><strong>成员方法</strong>：对应事物的<strong>行为</strong></p><h3 id="类的定义格式" tabindex="-1">类的定义格式 <a class="header-anchor" href="#类的定义格式" aria-label="Permalink to &quot;类的定义格式&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //成员变量</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //成员方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><strong>定义类</strong> ：就是定义类的成员，包括<strong>成员变量</strong>和<strong>成员方法</strong>。</li><li><strong>成员变量</strong> ：和以前定义变量几乎是一样的。只不过位置发生了改变。<strong>在类中</strong>，<strong>方法外</strong></li><li><strong>成员方法</strong> ：和以前定义方法几乎是一样的。只不过<strong>把static去掉</strong>，static的作用在面向对象后面课程中再详细 讲解</li></ul><p><strong>类的定义格式举例</strong></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //成员变量   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     String  name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//姓名   </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//年龄</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //成员方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //学习的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        publicvoid  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">study</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;好好学习，天天向上&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //吃饭的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;学习饿了要吃饭&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="对象的使用" tabindex="-1">对象的使用 <a class="header-anchor" href="#对象的使用" aria-label="Permalink to &quot;对象的使用&quot;">​</a></h3><h4 id="对象的使用格式" tabindex="-1">对象的使用格式 <a class="header-anchor" href="#对象的使用格式" aria-label="Permalink to &quot;对象的使用格式&quot;">​</a></h4><p>创建对象：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类名  对象名  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  类名();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用对象访问类中的成员:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>对象名.成员变量；</span></span>
<span class="line"><span>对象名.成员方法()；</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>对象的使用格式举例:</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Test01_Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]  </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //创建对象格式：类名  对象名  =  new  类名();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Student  s  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//cn.itcast.Student@100363</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //直接输出成员变量值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.name);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年龄：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.age);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;‐‐‐‐‐‐‐‐‐‐&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //给成员变量赋值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.name  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;赵丽颖&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.age  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //再次输出成员变量的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.name);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//赵丽颖</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年龄：&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.age);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;‐‐‐‐‐‐‐‐‐‐&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //调用成员方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">study</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  &quot;好好学习，天天向上&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  &quot;学习饿了要吃饭&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ｝</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="成员变量的默认值" tabindex="-1">成员变量的默认值 <a class="header-anchor" href="#成员变量的默认值" aria-label="Permalink to &quot;成员变量的默认值&quot;">​</a></h3><table><thead><tr><th></th><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>基本类型</td><td>整数（byte，short，int，long）</td><td>0</td></tr><tr><td></td><td>浮点数（float，double</td><td>0.0</td></tr><tr><td></td><td>字符（char）</td><td>&#39;\\u0000&#39;</td></tr><tr><td></td><td>布尔（boolean）</td><td>false</td></tr><tr><td>引用类型</td><td>数组，类，接口</td><td>null</td></tr></tbody></table><h4 id="对象内存图" tabindex="-1">对象内存图 <a class="header-anchor" href="#对象内存图" aria-label="Permalink to &quot;对象内存图&quot;">​</a></h4><h4 id="一个对象-调用一个方法内存图" tabindex="-1">一个对象，调用一个方法内存图 <a class="header-anchor" href="#一个对象-调用一个方法内存图" aria-label="Permalink to &quot;一个对象，调用一个方法内存图&quot;">​</a></h4><p><img src="`+k+'" alt="对象调用方法内存图"></p><blockquote><p>通过上图，我们可以理解，在栈内存中运行的方法，遵循&quot;先进后出，后进先出&quot;的原则。变量p指向堆内存中的空间，寻找方法信息，去执行该方法。</p><p>但是，这里依然有问题存在。创建多个对象时，如果每个对象内部都保存一份方法信息，这就非常浪费内存了，因为所有对象的方法信息都是一样的。那么如何解决这个问题呢？请看如下图解。</p></blockquote><h4 id="两个对象-调用同一方法内存图" tabindex="-1">两个对象，调用同一方法内存图 <a class="header-anchor" href="#两个对象-调用同一方法内存图" aria-label="Permalink to &quot;两个对象，调用同一方法内存图&quot;">​</a></h4><p><img src="'+d+'" alt="两个对象调用统一方法"></p><blockquote><p>对象调用方法时，根据对象中方法标记（地址值），去类中寻找方法信息。这样哪怕是多个对象，方法信息只保存一份，节约内存空间</p></blockquote><h4 id="一个引用-作为参数传递到方法中内存图" tabindex="-1">一个引用，作为参数传递到方法中内存图 <a class="header-anchor" href="#一个引用-作为参数传递到方法中内存图" aria-label="Permalink to &quot;一个引用，作为参数传递到方法中内存图&quot;">​</a></h4><p><img src="'+o+'" alt="引用参数传递方法"></p><blockquote><p>引用类型作为参数，传递的是地址值</p></blockquote><h4 id="成员变量和局部变量区别" tabindex="-1">成员变量和局部变量区别 <a class="header-anchor" href="#成员变量和局部变量区别" aria-label="Permalink to &quot;成员变量和局部变量区别&quot;">​</a></h4><p>变量根据<strong>定义位置的不同</strong>，我们给变量起了不同的名字。如下图所示：</p><p><img src="'+g+'" alt="成员变量和局部变量"></p>',57),u=s("ul",null,[s("li",null,"成员变量：类中，方法外"),s("li",null,"局部变量：方法中或者方法声明上 (形式参数)")],-1),b=s("ul",null,[s("li",null,"成员变量：类中"),s("li",null,"局部变量：方法中")],-1),y=s("ul",null,[s("li",null,"成员变量：有默认值"),s("li",null,"局部变量：没有默认值。必须先定义，赋值，最后使用")],-1),m=s("li",null,[a("在内存中的位置不同 "),s("ul",null,[s("li",null,"成员变量：堆内存"),s("li",null,"局部变量：栈内存")])],-1),F=s("li",null,[a("生命周期不同 "),s("ul",null,[s("li",null,"成员变量：随着对象的创建而存在，随着对象的消失而消失"),s("li",null,"局部变量：随着方法的调用而存在，随着方法的调用完毕而消失")])],-1);function A(q,D,v,_,B,C){const i=e("font");return r(),p("div",null,[c,s("ul",null,[s("li",null,[n(i,{color:"red"},{default:l(()=>[a("在类中的位置不同 ")]),_:1}),u]),s("li",null,[n(i,{color:"red"},{default:l(()=>[a("作用范围不一样")]),_:1}),b]),s("li",null,[n(i,{color:"red"},{default:l(()=>[a("初始化值的不同 ")]),_:1}),y]),m,F])])}const P=t(E,[["render",A]]);export{x as __pageData,P as default};
