import{_ as n,D as i,c as d,o as s,m as p,a3 as t,H as r,a as o,w as l}from"./chunks/framework.m76fjHMv.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"algorithm/0.基础知识/02.二进制位运算.md","filePath":"algorithm/0.基础知识/02.二进制位运算.md","lastUpdated":1761198736000}'),c={name:"algorithm/0.基础知识/02.二进制位运算.md"};function h(g,a,u,m,b,f){const e=i("font");return s(),d("div",null,[a[4]||(a[4]=p("h2",{id:"与运算-有零为零",tabindex:"-1"},[o("&（与运算）有零为零 "),p("a",{class:"header-anchor",href:"#与运算-有零为零","aria-label":'Permalink to "&（与运算）有零为零"'},"​")],-1)),p("p",null,[a[1]||(a[1]=o("运算规则",-1)),r(e,{color:"red"},{default:l(()=>[...a[0]||(a[0]=[o("在二进制中",-1)])]),_:1}),a[2]||(a[2]=o("：0&0=0，0&1=0，1&0=0，1&1=1",-1))]),a[5]||(a[5]=t('<p><strong>即：两位同时为“1”，结果才为“1”，否则为0</strong></p><p>例如：3&amp;5 即 0000 0011&amp; 0000 0101 = 00000001 因此，3&amp;5的值得1。</p><p><strong>另，负数按补码形式参加按位与运算。</strong></p><h3 id="与运算-的特殊用途" tabindex="-1">“与运算”的特殊用途： <a class="header-anchor" href="#与运算-的特殊用途" aria-label="Permalink to &quot;“与运算”的特殊用途：&quot;">​</a></h3><ol><li>清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</li><li>取一个数中指定位（取xx位到xx位的数据）</li></ol><p>方法：找一个数，对应X要取的位，该数的对应位为1，其余位为零，此数与X进行“与运算”可以得到X中的指定位。</p><p>例：设X=10101110，</p><p>取X的低4位，用 X &amp; 0000 1111 = 00001110 即可得到；</p><p>还可用来取X的2、4、6位。</p><h2 id="或运算-有一为一" tabindex="-1">|（或运算）有一为一 <a class="header-anchor" href="#或运算-有一为一" aria-label="Permalink to &quot;|（或运算）有一为一&quot;">​</a></h2><p>按位或运算符（|）</p><p>参加运算的两个对象，按二进制位进行“或”运算。</p><p>运算规则：0|0=0； 0|1=1； 1|0=1； 1|1=1；</p><p>即 ：参加运算的两个对象只要有一个为1，其值为1。</p><p>例如:3|5 即 00000011 | 0000 0101 = 00000111 因此，3|5的值得7。</p><p><strong>另，负数按补码形式参加按位或运算。</strong></p><h3 id="或运算-特殊作用" tabindex="-1">“或运算”特殊作用： <a class="header-anchor" href="#或运算-特殊作用" aria-label="Permalink to &quot;“或运算”特殊作用：&quot;">​</a></h3><p>（1）常用来对一个数据的<strong>某些位 置1</strong>。</p><p>方法：找到一个数，对应X要置1的位，该数的对应位为1，其余位为零。此数与X相或可使X中的某些位置1。</p><p>例：将X=10100000的低4位置1 ，用X | 0000 1111 = 1010 1111即可得到。</p><h2 id="异或运算-相同为零-也可以叫做无进制加" tabindex="-1">^（异或运算）相同为零 也可以叫做无进制加 <a class="header-anchor" href="#异或运算-相同为零-也可以叫做无进制加" aria-label="Permalink to &quot;^（异或运算）相同为零 也可以叫做无进制加&quot;">​</a></h2><p>异或运算符（^）</p><p>参加运算的两个数据，按二进制位进行“异或”运算。</p><p>运算规则：0^0=0； 0^1=1； 1^0=1； 1^1=0；</p><p>即：参加运算的两个对象，如果两个相应位为“异”（值不同），则该位结果为1，否则为0。</p><h3 id="异或运算-的特殊作用" tabindex="-1">“异或运算”的特殊作用： <a class="header-anchor" href="#异或运算-的特殊作用" aria-label="Permalink to &quot;“异或运算”的特殊作用：&quot;">​</a></h3><p>（1）使特定位翻转找一个数，对应X要翻转的各位，该数的对应位为1，其余位为零，此数与X对应位异或即可。</p><p>例：X=1010 1110，使X低4位翻转，用X ^0000 1111 = 1010 0001即可得到。</p><p>（2）与0相异或，保留原值 ，X ^ 00000000 = 1010 1110。</p><p>（3）两个数交换 a = a ^ b; b = b ^ a; a= a ^ b</p><p>a = 1001, b = 0101 ;</p><p>a = a ^ b = 1001^ 0101 = 1100</p><p>b = b ^ a = 0101^ 1100 = 1001</p><p>a = a ^ b = 1100 ^ 1001 = 0101</p><h2 id="取反运算-1变0" tabindex="-1">~(取反运算) 1变0 <a class="header-anchor" href="#取反运算-1变0" aria-label="Permalink to &quot;~(取反运算) 1变0&quot;">​</a></h2><p>取反运算符（~）</p><p>参加运算的一个数据，按二进制位进行“取反”运算。</p><p>运算规则：~1=0； ~0=1；</p><p>即：对一个二进制数按位取反，即将0变1，1变0。</p><h3 id="取反的特殊作用" tabindex="-1">取反的特殊作用： <a class="header-anchor" href="#取反的特殊作用" aria-label="Permalink to &quot;取反的特殊作用：&quot;">​</a></h3><p>（1）使一个数的最低位为零，可以表示为：a&amp;~1。</p><p>~1的值为1111111111111110，再按“与”运算，最低位一定为0。</p><p>因为“~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p><h2 id="左移运算符-乘以2的次方" tabindex="-1">左移运算符（&lt;&lt;）乘以2的次方 <a class="header-anchor" href="#左移运算符-乘以2的次方" aria-label="Permalink to &quot;左移运算符（&lt;&lt;）乘以2的次方&quot;">​</a></h2><p>将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p><p>例：a = a&lt;&lt; 2将a的二进制位左移2位，右补0，</p><p>左移1位后a = a *2;</p><p>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p><h2 id="右移运算符-除以2的次方" tabindex="-1">右移运算符（&gt;&gt;）除以2的次方 <a class="header-anchor" href="#右移运算符-除以2的次方" aria-label="Permalink to &quot;右移运算符（&gt;&gt;）除以2的次方&quot;">​</a></h2><p>将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p><p>操作数每右移一位，相当于该数除以2。</p><p>例如：a = a&gt;&gt; 2 将a的二进制位右移2位，</p>',52)),r(e,{color:"red"},{default:l(()=>[...a[3]||(a[3]=[o("左补0 or 补1得看被移数是正还是负。",-1)])]),_:1}),a[6]||(a[6]=t('<p><code>&gt;&gt;</code>运算符把expression1 的所有位向右移 expression2指定的位数。expression1的符号位被用来填充右移后左边空出来的位。向右移出的位被丢弃。</p><p>例如，下面的代码被求值后，temp 的值是 -4：</p><p>-14 （即二进制的 11110010）右移两位等于 -4（即二进制的 11111100）。</p><p>var temp = -14 &gt;&gt; 2</p><h2 id="负数的二进制" tabindex="-1">负数的二进制 <a class="header-anchor" href="#负数的二进制" aria-label="Permalink to &quot;负数的二进制&quot;">​</a></h2><p>在 Java（以及大多数现代计算机系统）中，负数是以 <strong>补码 (Two&#39;s Complement)</strong> 的形式表示和计算二进制的。理解补码是理解负数二进制表示的关键。</p><p>计算一个负数的二进制表示通常需要以下步骤：</p><p><strong>1. 获取该负数的绝对值的二进制表示。</strong></p><p>假设我们要计算 -5 的二进制表示（以 8 位为例）：</p><ul><li>首先，获取 5 的二进制表示：<code>00000101</code></li></ul><p><strong>2. 对绝对值的二进制表示进行按位取反（得到反码或一的补码）。</strong></p><p>将 5 的二进制表示 <code>00000101</code> 的每一位取反（0 变为 1，1 变为 0）：</p><ul><li>反码：<code>11111010</code></li></ul><p><strong>3. 将反码加 1，得到补码。</strong></p><p>将上一步得到的反码 <code>11111010</code> 加 1：</p><ul><li><code>11111010 + 1 = 11111011</code></li></ul><p>因此，-5 在 8 位二进制补码中的表示就是 <code>11111011</code>。</p><p><strong>Java 中的实现和特性：</strong></p><ul><li><p><strong>符号位:</strong> 在补码表示中，最高位（最左边的位）被用作符号位。</p><ul><li>如果最高位是 <code>0</code>，则该数是正数或零。</li><li>如果最高位是 <code>1</code>，则该数是负数。</li></ul></li><li><p><strong>补码的优势:</strong></p><ul><li><strong>简化加法和减法:</strong> 使用补码，加法和减法运算可以使用相同的硬件电路来处理，包括正数和负数。例如，计算 <code>5 + (-5)</code> 在二进制补码中就相当于 <code>00000101 + 11111011 = 100000000</code>。溢出的一位被丢弃，结果为 <code>00000000</code>，即 0。</li><li><strong>唯一的零表示:</strong> 补码表示中只有一个零 (<code>00000000</code>)，避免了原码和反码中存在的 <code>+0</code> 和 <code>-0</code> 的问题。</li></ul></li></ul>',19))])}const X=n(c,[["render",h]]);export{q as __pageData,X as default};
