import{_ as i,c as a,o as n,a3 as e}from"./chunks/framework.Dohe277V.js";const l="/blog/assets/1e4a7297ecb54622a8a605ea42c3a7f8.BqxfoYiA.png",t="/blog/assets/8b3b8feaec764d9faa2be9cad97c0853.BMIMdKlh.png",g=JSON.parse('{"title":"08.JUC原子类，CAS，Unsafe","description":"","frontmatter":{"title":"08.JUC原子类，CAS，Unsafe","tags":["java","多线程"],"categories":["java","多线程"]},"headers":[],"relativePath":"java/02.多线程和高并发/08.JUC原子类，CAS，Unsafe.md","filePath":"java/02.多线程和高并发/08.JUC原子类，CAS，Unsafe.md","lastUpdated":1744770342000}'),p={name:"java/02.多线程和高并发/08.JUC原子类，CAS，Unsafe.md"};function h(k,s,r,d,E,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h2 id="cas" tabindex="-1">CAS <a class="header-anchor" href="#cas" aria-label="Permalink to &quot;CAS&quot;">​</a></h2><h3 id="什么是cas" tabindex="-1">什么是CAS <a class="header-anchor" href="#什么是cas" aria-label="Permalink to &quot;什么是CAS&quot;">​</a></h3><p>CAS（Compare-And-Swap）是一种原子操作，常用于并发编程中，特别是在实现无锁数据结构和算法时。它的核心思想是，通过比较一个内存位置的值是否与预期的旧值相等，如果相等，则将其更新为新值。这个过程是原子的，即不可中断的，能够在并发环境下安全地更新共享变量。</p><h3 id="cas-的基本原理" tabindex="-1">CAS 的基本原理 <a class="header-anchor" href="#cas-的基本原理" aria-label="Permalink to &quot;CAS 的基本原理&quot;">​</a></h3><p>CAS 操作通常涉及三个操作数：</p><ol><li><strong>内存地址（V）</strong>：要进行更新的内存位置（例如一个变量）。</li><li><strong>旧值（A）</strong>：期望的当前值。</li><li><strong>新值（B）</strong>：希望将旧值更新为的新值。</li></ol><p>CAS 操作的步骤：</p><ul><li>比较内存地址 <code>V</code> 中的值是否等于旧值 <code>A</code>。</li><li>如果相等，更新 <code>V</code> 的值为新值 <code>B</code>。</li><li>如果不相等，则不做任何修改。</li></ul><p>CAS 操作的核心特点是它的原子性，意味着它在执行时不会被其他线程打断。这个操作通常是在硬件层面上通过处理器的原子指令来实现，因此执行非常快速。</p><h3 id="cas-的应用" tabindex="-1">CAS 的应用 <a class="header-anchor" href="#cas-的应用" aria-label="Permalink to &quot;CAS 的应用&quot;">​</a></h3><p>CAS 是构建无锁数据结构和并发算法的基础。Java 的 <code>java.util.concurrent.atomic</code> 包中的一些类（如 <code>AtomicInteger</code>、 <code>AtomicLong</code>、<code>AtomicReference</code> 等）就是通过 CAS 来实现原子性操作的。</p><p>例如，<code>AtomicInteger</code> 中的 <code>compareAndSet()</code> 方法就是典型的 CAS 操作，它的工作原理如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AtomicInteger atomicInteger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CAS操作：如果当前值是0，则将其更新为1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicInteger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在这个例子中，如果 <code>atomicInteger</code> 的当前值是 0，<code>compareAndSet()</code> 将其更新为 1，并返回 <code>true</code>。如果当前值不是 0， <code>compareAndSet()</code> 将不进行任何更新，并返回 <code>false</code>。</p><h3 id="cas-的优缺点" tabindex="-1">CAS 的优缺点 <a class="header-anchor" href="#cas-的优缺点" aria-label="Permalink to &quot;CAS 的优缺点&quot;">​</a></h3><p><strong>优点：</strong></p><ul><li><strong>无锁机制</strong>：CAS 是一种基于乐观锁的机制，不需要传统的互斥锁（如 <code>synchronized</code>），从而减少了锁竞争，提高了并发性能。</li><li><strong>高效</strong>：CAS 操作通常由硬件直接支持，性能非常高。</li></ul><p><strong>缺点：</strong></p><ul><li><strong>ABA 问题</strong>：CAS 无法检测一个值是否经历过变化，只能判断值是否为某个预期的旧值。如果某个值从 A 变成 B，再变回 A，CAS 会误认为值没有变化，这被称为 ABA 问题。为了解决这个问题，可以使用带有版本号或者时间戳的 CAS 变种（如 <code>AtomicStampedReference</code>）。</li><li><strong>自旋开销</strong>：如果多个线程频繁地失败（即多次 CAS 操作不能成功），会导致 CPU 资源浪费，增加系统开销。</li></ul><h2 id="unsafe类" tabindex="-1">UnSafe类 <a class="header-anchor" href="#unsafe类" aria-label="Permalink to &quot;UnSafe类&quot;">​</a></h2><p><code>Unsafe</code> 类是 Java 中一个非常特殊且强大的类，它位于 <code>sun.misc</code> 包下，用于直接操作内存、修改对象字段、管理线程等底层操作。由于 <code>Unsafe</code> 提供了直接的底层操作功能，它有时被称为 &quot;不安全&quot; 的类，因此命名为 <code>Unsafe</code>。<code>Unsafe</code> 是一个非常强大的工具，但也正因为它能够绕过 Java 的安全机制，因此需要非常小心使用。</p><h3 id="unsafe-类的功能" tabindex="-1"><code>Unsafe</code> 类的功能 <a class="header-anchor" href="#unsafe-类的功能" aria-label="Permalink to &quot;\`Unsafe\` 类的功能&quot;">​</a></h3><p><code>Unsafe</code> 类提供了对内存的低级控制，它有很多底层操作方法，常见的功能包括：</p><ol><li><strong>内存分配与释放</strong>：能够直接分配和释放内存，甚至可以操作直接内存（off-heap memory）。</li><li><strong>对象字段操作</strong>：通过 <code>Unsafe</code>，可以直接操作对象的字段，甚至可以跳过访问权限检查（例如，访问私有字段）。</li><li><strong>内存屏障</strong>：能够显式地管理 CPU 的内存屏障（memory barriers），用来控制多线程程序的内存可见性。</li><li><strong>CAS 操作</strong>：<code>Unsafe</code> 提供了底层的 <code>compareAndSwap</code> 方法（与 Java 中的 <code>AtomicInteger</code> 类似），用于实现无锁并发算法。</li><li><strong>类加载和对象创建</strong>：<code>Unsafe</code> 能够绕过构造函数创建对象，并可以用来加载类，甚至不调用构造函数。</li></ol><h3 id="常用的-unsafe-方法" tabindex="-1">常用的 <code>Unsafe</code> 方法 <a class="header-anchor" href="#常用的-unsafe-方法" aria-label="Permalink to &quot;常用的 \`Unsafe\` 方法&quot;">​</a></h3><ol><li><p><strong><code>allocateMemory(long size)</code></strong><br> 分配一块指定大小的本地内存（off-heap memory），返回该内存的地址。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> address </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allocateMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>freeMemory(long address)</code></strong><br> 释放通过 <code>allocateMemory</code> 分配的内存。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(address);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>getObjectField(Object obj, long fieldOffset)</code></strong><br> 获取对象字段的值，绕过字段访问控制。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getObjectField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, fieldOffset);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>putObjectField(Object obj, long fieldOffset, Object value)</code></strong><br> 设置对象字段的值，绕过字段访问控制。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">putObjectField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, fieldOffset, value);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>compareAndSwapInt(Object obj, long offset, int expected, int update)</code></strong><br> 进行原子操作：比较内存中对象字段的值是否与预期值相等，如果相等则更新为新值。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSwapInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, offset, expected, update);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>objectFieldOffset(Field field)</code></strong><br> 获取对象字段在内存中的偏移量（即该字段相对于对象的内存地址的偏移）。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> offset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">objectFieldOffset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(field);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p><strong><code>ensureClassInitialized(Class&lt;?&gt; clazz)</code></strong><br> 确保类的初始化（即类的静态代码块被执行）。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ensureClassInitialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyClass.class);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h3 id="获取-unsafe-实例" tabindex="-1">获取 <code>Unsafe</code> 实例 <a class="header-anchor" href="#获取-unsafe-实例" aria-label="Permalink to &quot;获取 \`Unsafe\` 实例&quot;">​</a></h3><p>由于 <code>Unsafe</code> 类存在于 <code>sun.misc</code> 包下，它不是标准 Java API 的一部分，并且在默认情况下无法直接访问。因此，获取 <code>Unsafe</code> 的实例并不简单。<code>Unsafe</code> 实际上是通过反射来访问的，通常有以下几种方式来获取 <code>Unsafe</code> 实例：</p><ol><li><p><strong>通过反射获取</strong>： 你可以通过反射来访问 <code>Unsafe</code> 类的实例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sun.misc.Unsafe;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.Field;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnsafeExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Exception {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Field field </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unsafe.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;theUnsafe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        field.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAccessible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Unsafe unsafe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Unsafe) field.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p><strong>通过 <code>Unsafe</code> 类的静态方法</strong>： <code>Unsafe</code> 类提供了一个静态方法 <code>getUnsafe()</code>，可以在某些情况下通过它来获取 <code>Unsafe</code> 实例。但在普通的应用程序中，这个方法会抛出安全异常。只有在 JVM 中运行时，或者通过某些特殊配置（如通过启动参数开启 <code>-Xbootclasspath</code>）才能访问它。</p></li></ol><h3 id="unsafe-类的危险性" tabindex="-1"><code>Unsafe</code> 类的危险性 <a class="header-anchor" href="#unsafe-类的危险性" aria-label="Permalink to &quot;\`Unsafe\` 类的危险性&quot;">​</a></h3><ol><li><p><strong>绕过安全检查</strong>： <code>Unsafe</code> 可以直接修改对象字段，包括私有字段，绕过了 Java 安全机制中的访问控制，这意味着它能直接操作对象的状态，容易导致潜在的内存问题和数据不一致。</p></li><li><p><strong>可能导致内存泄漏</strong>： 使用 <code>Unsafe</code> 直接管理内存（例如分配和释放内存）时，必须非常小心，错误的内存操作可能导致内存泄漏、内存溢出等问题。</p></li><li><p><strong>非标准 API</strong>： <code>Unsafe</code> 是一个非标准 API，它并不是 Java 官方推荐的公共 API，未来可能会被移除或更改。因此，依赖 <code>Unsafe</code> 会导致代码的可维护性和兼容性问题。</p></li><li><p><strong>不安全的操作</strong>： 由于 <code>Unsafe</code> 可以直接操作底层内存，它能够执行一些非常低级的操作，这些操作可能导致崩溃、未定义行为等非常危险的情况。</p></li></ol><h3 id="何时使用-unsafe" tabindex="-1">何时使用 <code>Unsafe</code>？ <a class="header-anchor" href="#何时使用-unsafe" aria-label="Permalink to &quot;何时使用 \`Unsafe\`？&quot;">​</a></h3><p><code>Unsafe</code> 主要用于性能敏感的应用，尤其是在开发高性能的并发程序和底层框架时。它为开发者提供了能够直接操作内存、进行原子操作等底层能力，适用于以下场景：</p><ul><li>实现无锁数据结构（例如并发队列、栈等）。</li><li>高性能的内存管理和垃圾回收。</li><li>低级别的系统编程，或者用于一些 Java 不提供的底层特性。</li></ul><p>但是，由于 <code>Unsafe</code> 的危险性和不安全性，通常不建议普通应用程序直接使用，只有在非常特定的性能优化需求下才会考虑使用它。</p><h3 id="unsafe和cas的关系" tabindex="-1">Unsafe和CAS的关系 <a class="header-anchor" href="#unsafe和cas的关系" aria-label="Permalink to &quot;Unsafe和CAS的关系&quot;">​</a></h3><p><code>Unsafe</code> 和 <strong>CAS（Compare-And-Swap）</strong> 之间的关系主要体现在 <code>Unsafe</code> 提供了对 CAS 操作的底层支持，特别是在并发编程中实现无锁原子操作时。具体来说， <code>Unsafe</code> 提供了一些原子操作的方法，其中就包括 <strong>CAS 操作</strong>，它们是高效的并发控制机制。</p><h4 id="unsafe-中的-cas-方法" tabindex="-1"><strong><code>Unsafe</code> 中的 CAS 方法</strong> <a class="header-anchor" href="#unsafe-中的-cas-方法" aria-label="Permalink to &quot;**\`Unsafe\` 中的 CAS 方法**&quot;">​</a></h4><p><code>Unsafe</code> 提供了多个原子方法，最常见的 CAS 方法是 <code>compareAndSwap</code> 系列的方法，用于进行原子比较和交换操作。这些方法通过硬件指令来实现原子性操作。常见的方法有：</p><ul><li><code>compareAndSwapInt(Object obj, long offset, int expected, int update)</code></li><li><code>compareAndSwapLong(Object obj, long offset, long expected, long update)</code></li><li><code>compareAndSwapObject(Object obj, long offset, Object expected, Object update)</code></li></ul><p>这些方法的作用是：</p><ul><li><strong><code>expected</code></strong>：期望值</li><li><strong><code>update</code></strong>：新的值</li><li><strong><code>obj</code></strong>：要操作的对象</li><li><strong><code>offset</code></strong>：字段在对象内存中的偏移量</li></ul><p>例如，<code>compareAndSwapInt</code> 方法的调用逻辑如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSwapInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj, offset, expected, update);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>它会先检查 <code>obj</code> 中对应位置的值是否等于 <code>expected</code>（期望的值）。</li><li>如果相等，<code>unsafe</code> 会将该位置的值更新为 <code>update</code>（新值），并返回 <code>true</code>。</li><li>如果不相等，则返回 <code>false</code>。</li></ul><h2 id="atomicstampedreference解决cas的aba问题" tabindex="-1">AtomicStampedReference解决CAS的ABA问题 <a class="header-anchor" href="#atomicstampedreference解决cas的aba问题" aria-label="Permalink to &quot;AtomicStampedReference解决CAS的ABA问题&quot;">​</a></h2><h3 id="atomicstampedreference-解决-aba-问题的原理" tabindex="-1"><strong>AtomicStampedReference 解决 ABA 问题的原理</strong> <a class="header-anchor" href="#atomicstampedreference-解决-aba-问题的原理" aria-label="Permalink to &quot;**AtomicStampedReference 解决 ABA 问题的原理**&quot;">​</a></h3><p><code>AtomicStampedReference</code> 通过引入一个 <strong>“时间戳”</strong> 或 <strong>“版本号”</strong>（<code>stamp</code>），将变量的值和版本号一起存储。当 CAS 操作发生时，它不仅会检查当前值是否与期望值相同，还会检查版本号（<code>stamp</code>）是否一致。这样，即使变量的值发生了变化，只要版本号不同，CAS 操作就能检测到这一点，避免了由于值相同但内在发生过变化所引发的错误。</p><p><code>AtomicStampedReference</code> 内部存储了一个对象引用（即 <code>reference</code>）和一个整型的版本号（即 <code>stamp</code>）。每次更新时，都会更新 <code>stamp</code>，这样即使对象的值回到了原来的状态，只要 <code>stamp</code> 不同，CAS 操作就能够发现变化，避免了 ABA 问题。</p><h3 id="atomicstampedreference-的用法" tabindex="-1"><strong>AtomicStampedReference 的用法</strong> <a class="header-anchor" href="#atomicstampedreference-的用法" aria-label="Permalink to &quot;**AtomicStampedReference 的用法**&quot;">​</a></h3><p><code>AtomicStampedReference</code> 是 Java 5 引入的 <code>java.util.concurrent.atomic</code> 包的一部分，用于处理带有版本号的引用类型。它包含以下主要方法：</p><ul><li><code>getReference()</code>: 获取当前引用对象。</li><li><code>getStamp()</code>: 获取当前版本号（<code>stamp</code>）。</li><li><code>compareAndSet(reference, stamp, newReference, newStamp)</code>: 进行 CAS 操作，比较引用值和版本号，如果它们都与期望的值一致，则更新引用值和版本号。</li></ul><h3 id="示例代码" tabindex="-1"><strong>示例代码</strong> <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;**示例代码**&quot;">​</a></h3><p>下面是一个使用 <code>AtomicStampedReference</code> 解决 ABA 问题的示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.atomic.AtomicStampedReference;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicStampedReferenceExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 初始值是 &quot;A&quot;，版本号是 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String initialValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initialStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 创建一个 AtomicStampedReference 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            AtomicStampedReference&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; atomicStampedRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AtomicStampedReference&lt;&gt;(initialValue, initialStamp);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 模拟多个线程的并发操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread thread1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 获取当前引用值和版本号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] stampHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                String currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicStampedRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stampHolder);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stampHolder[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 1: Current value = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Stamp = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentStamp);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 模拟 A -&gt; B -&gt; A 的变化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicStampedRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentRef, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, currentStamp, currentStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 1: CAS operation (A -&gt; B): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicStampedRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, currentStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, currentStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 1: CAS operation (B -&gt; A): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Thread thread2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 获取当前引用值和版本号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] stampHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                String currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicStampedRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stampHolder);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stampHolder[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 2: Current value = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Stamp = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentStamp);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // CAS 操作，期望值是 &quot;A&quot;，版本号是 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicStampedRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 2: CAS operation (A -&gt; C): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            thread1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            thread2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            thread1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            thread2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 最终值和版本号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] finalStampHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            String finalRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicStampedRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(finalStampHolder);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalStamp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalStampHolder[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Final value = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Final stamp = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalStamp);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><p><img src="`+l+`" alt=""></p><ol><li><p><strong>初始化</strong>：我们创建了一个 <code>AtomicStampedReference</code> 实例 <code>atomicStampedRef</code>，它持有初始值 <code>&quot;A&quot;</code> 和版本号 <code>1</code>。</p></li><li><p><strong>线程 1 的操作</strong>：线程 1 获取当前的引用值 <code>&quot;A&quot;</code> 和版本号 <code>1</code>，然后模拟了一次从 <code>&quot;A&quot;</code> -&gt; <code>&quot;B&quot;</code> -&gt; <code>&quot;A&quot;</code> 的值变化。通过 CAS 操作，成功将 <code>&quot;A&quot;</code> 更新为 <code>&quot;B&quot;</code>，然后再更新回 <code>&quot;A&quot;</code>。</p></li><li><p><strong>线程 2 的操作</strong>：线程 2 获取当前值和版本号，尝试执行一个 CAS 操作，期望值是 <code>&quot;A&quot;</code>，版本号是 <code>1</code>，将其更新为 <code>&quot;C&quot;</code> 和版本号 <code>2</code>。</p></li><li><p><strong>ABA 问题解决</strong>：由于 <code>AtomicStampedReference</code> 引入了版本号（<code>stamp</code>），线程 2 在尝试执行 CAS 操作时，尽管变量的值从 <code>&quot;A&quot;</code> 更新为 <code>&quot;B&quot;</code>，然后又变回 <code>&quot;A&quot;</code>，但版本号发生了变化。线程 2 会因为版本号不匹配而无法成功执行 CAS 操作。</p></li></ol><h2 id="atomicmarkablereference解决cas的aba问题" tabindex="-1">AtomicMarkableReference解决CAS的ABA问题 <a class="header-anchor" href="#atomicmarkablereference解决cas的aba问题" aria-label="Permalink to &quot;AtomicMarkableReference解决CAS的ABA问题&quot;">​</a></h2><h3 id="atomicmarkablereference-的原理" tabindex="-1"><strong><code>AtomicMarkableReference</code> 的原理</strong> <a class="header-anchor" href="#atomicmarkablereference-的原理" aria-label="Permalink to &quot;**\`AtomicMarkableReference\` 的原理**&quot;">​</a></h3><p><code>AtomicMarkableReference</code> 通过为引用添加一个 <strong>布尔标记（mark）</strong> 来解决 ABA 问题。这个标记是一个简单的 <code>boolean</code> 值，表示引用当前的状态。当引用值发生变化时，标记也会变化。这样，即使引用的值看似相同，标记的变化可以让 CAS 操作正确识别出引用经历了变化，从而避免了 ABA 问题。</p><p><code>AtomicMarkableReference</code> 内部存储了两个值：</p><ul><li><strong>引用值（reference）</strong>：实际存储的对象引用。</li><li><strong>标记（mark）</strong>：一个布尔值，用来标识该引用是否发生过变化。</li></ul><p>每次更新时，<code>AtomicMarkableReference</code> 会更新引用和标记，以确保 CAS 操作的正确性。</p><h3 id="atomicmarkablereference-的方法" tabindex="-1"><strong><code>AtomicMarkableReference</code> 的方法</strong> <a class="header-anchor" href="#atomicmarkablereference-的方法" aria-label="Permalink to &quot;**\`AtomicMarkableReference\` 的方法**&quot;">​</a></h3><p><code>AtomicMarkableReference</code> 提供了以下关键方法：</p><ul><li><code>getReference()</code>: 获取当前存储的引用。</li><li><code>getMark()</code>: 获取当前存储的标记。</li><li><code>compareAndSet(reference, mark, newReference, newMark)</code>: 执行 CAS 操作，比较当前的引用值和标记是否与期望值一致，如果一致，则更新引用值和标记。</li></ul><h3 id="示例代码-使用-atomicmarkablereference-解决-aba-问题" tabindex="-1"><strong>示例代码：使用 <code>AtomicMarkableReference</code> 解决 ABA 问题</strong> <a class="header-anchor" href="#示例代码-使用-atomicmarkablereference-解决-aba-问题" aria-label="Permalink to &quot;**示例代码：使用 \`AtomicMarkableReference\` 解决 ABA 问题**&quot;">​</a></h3><p>下面是一个示例，演示了如何使用 <code>AtomicMarkableReference</code> 解决 CAS 的 ABA 问题。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.concurrent.atomic.AtomicMarkableReference;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicMarkableReferenceExample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 初始引用值是 &quot;A&quot;，标记是 false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       String initialValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> initialMark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 创建一个 AtomicMarkableReference 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       AtomicMarkableReference&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; atomicMarkableRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AtomicMarkableReference&lt;&gt;(initialValue, initialMark);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 模拟多个线程的并发操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       Thread thread1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 获取当前引用值和标记</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] markHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          String currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicMarkableRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(markHolder);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentMark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> markHolder[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 1: Current value = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Mark = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentMark);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 模拟 A -&gt; B -&gt; A 的变化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicMarkableRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(currentRef, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, currentMark, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentMark);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 1: CAS operation (A -&gt; B): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success1);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicMarkableRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentMark, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">currentMark);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 1: CAS operation (B -&gt; A): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       Thread thread2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Thread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 获取当前引用值和标记</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] markHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          String currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicMarkableRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(markHolder);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentMark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> markHolder[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 2: Current value = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Mark = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentMark);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // CAS 操作，期望值是 &quot;A&quot;，标记是 false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicMarkableRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareAndSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Thread 2: CAS operation (A -&gt; C): &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> success);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       thread1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       thread2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       thread1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       thread2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 最终值和标记</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] finalMarkHolder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       String finalRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> atomicMarkableRef.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(finalMarkHolder);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalMark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalMarkHolder[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Final value = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalRef </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;, Final mark = &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> finalMark);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br></div></div><p><img src="`+t+'" alt=""></p><h3 id="代码解析" tabindex="-1"><strong>代码解析</strong> <a class="header-anchor" href="#代码解析" aria-label="Permalink to &quot;**代码解析**&quot;">​</a></h3><ol><li><p><strong>初始化</strong>：创建了一个 <code>AtomicMarkableReference</code> 对象 <code>atomicMarkableRef</code>，它保存了一个初始值 <code>&quot;A&quot;</code> 和标记 <code>false</code>。</p></li><li><p><strong>线程 1 的操作</strong>：</p><ul><li>线程 1 获取当前的引用值和标记。</li><li>线程 1 模拟了从 <code>&quot;A&quot;</code> -&gt; <code>&quot;B&quot;</code> -&gt; <code>&quot;A&quot;</code> 的引用值变化，并通过 CAS 操作更新引用值和标记。</li><li>由于标记也一起更新，CAS 操作能够正确检测到引用值的变化。</li></ul></li><li><p><strong>线程 2 的操作</strong>：</p><ul><li>线程 2 获取当前的引用值和标记，尝试执行 CAS 操作，将引用值 <code>&quot;A&quot;</code> 和标记 <code>false</code> 更新为 <code>&quot;C&quot;</code> 和标记 <code>true</code>。</li><li>线程 2 可以正确地检测到标记和引用值的变化。</li></ul></li><li><p><strong>ABA 问题解决</strong>：</p><ul><li>如果线程 2 在执行 CAS 操作时，引用值 <code>&quot;A&quot;</code> 已经经历了变化（例如从 <code>&quot;A&quot;</code> -&gt; <code>&quot;B&quot;</code> -&gt; <code>&quot;A&quot;</code>），但标记已经变化，CAS 操作依然能够成功地检测到这一变化，并避免了错误更新。</li></ul></li></ol><p>在多线程环境中，<code>AtomicMarkableReference</code> 可以有效地解决 CAS 操作中的 ABA 问题，确保引用更新的正确性。</p>',73)]))}const y=i(p,[["render",h]]);export{g as __pageData,y as default};
