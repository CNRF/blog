import{_ as a,c as i,o as l,a3 as n}from"./chunks/framework.Dohe277V.js";const e="/blog/assets/HashSet%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.BUYiTsGb.png",c=JSON.parse('{"title":"01.java基础面试题","description":"","frontmatter":{"title":"01.java基础面试题","tags":["java","面试"],"categories":["java","面试"]},"headers":[],"relativePath":"java/99.面试/01.java基础面试题.md","filePath":"java/99.面试/01.java基础面试题.md","lastUpdated":1741663336000}'),t={name:"java/99.面试/01.java基础面试题.md"};function p(h,s,r,k,o,d){return l(),i("div",null,s[0]||(s[0]=[n(`<h2 id="object对象方法有哪些" tabindex="-1">Object对象方法有哪些 <a class="header-anchor" href="#object对象方法有哪些" aria-label="Permalink to &quot;Object对象方法有哪些&quot;">​</a></h2><ul><li>getClass() - 获取运行是的Class对象，属于反射的内一套，获取运行是的一些数据。</li><li>hashCode() - 返回对象的hash值。目的是为了更好的支持哈希表，比如基于Java中的HashMap使用</li><li>equals() - 比较两个对象是否相等，默认 ==</li><li>clone() - 创建对象的副本。深拷贝和浅拷贝的内容 <ul><li>默认是浅拷贝，将当前对象复制一份，其中的基本数据类型直接复用值，引用数据类型是复用地址值。</li><li>深拷贝，将当前对象复制一份，其中的基本数据类型直接复用值，引用数据类型会重新的创建一个，不会复制之前的地址。</li><li>深拷贝要自己编写克隆内部的引用类型对象。</li></ul></li><li>toString - 返回一个以字符串形式表示当前对象的信息。</li><li>wait - 当某个线程持有当前对象锁时，可以执行对象锁.wait，将持有对象锁的线程挂起等待。</li><li>notify - 当某个线程持有当前对象锁时，可以执行对象锁.notify，唤醒之前基于wait挂起的一个线程。</li><li>notifyAll - 当某个线程持有当前对象锁时，可以执行对象锁.notifyAll方法，唤醒之前所有基于wait挂起的线程。</li><li>finalize(在jdk9后过期) - 当触发垃圾回收时，如果当前对象无法基于可达性分析定位到，就会被垃圾回收器回收掉，在回收之前，如果这个对象重写了finalize，那就会触发finalize方法执行。可以执行一些其他的清理工作。（Finalize在JVM中，他不保证一定执行，他用的守护线程）</li></ul><h2 id="创建对象的方式" tabindex="-1">创建对象的方式 <a class="header-anchor" href="#创建对象的方式" aria-label="Permalink to &quot;创建对象的方式&quot;">​</a></h2><ul><li>new 关键字。</li><li>Construct，利用Construct的newInstance去构建对象。<strong>（引导Spring~）</strong></li><li>反序列化方式： <ul><li>流反序列化。</li><li>JSON字符串反序列化等等</li></ul></li><li>clone，克隆也是ok的。</li><li>工厂模式去构建对象。<strong>（引导Spring~）</strong></li></ul><h2 id="object对象为什么需要有clone方法" tabindex="-1">Object对象为什么需要有clone方法 <a class="header-anchor" href="#object对象为什么需要有clone方法" aria-label="Permalink to &quot;Object对象为什么需要有clone方法&quot;">​</a></h2><p>Java中提供的clone方法主要是允许将一个对象进行copy，做到快速的复制一个对象。</p><p>而不需要new一个空对象，然后自己慢慢导入数据，开发效率太低。</p><p>clone也可以简化一些代码。</p><p>如果再问clone，基本就是聊聊深拷贝，和浅拷贝。</p><ul><li>默认是浅拷贝，将当前对象复制一份，其中的基本数据类型直接复用值，引用数据类型是复用地址值。</li><li>深拷贝，将当前对象复制一份，其中的基本数据类型直接复用值，引用数据类型会重新的创建一个，不会复制之前的地址。 深拷贝要自己编写克隆内部的引用类型对象。</li></ul><h2 id="构造器是否可以被重写" tabindex="-1">构造器是否可以被重写 <a class="header-anchor" href="#构造器是否可以被重写" aria-label="Permalink to &quot;构造器是否可以被重写&quot;">​</a></h2><p>构造器不能被继承，所以不能被重写。 但是构造器可以被重载</p><ul><li>重写（Overrides）：是指子类提供父类中声明的方法的具体实现。也可以覆盖父类中提供好的实现内容。<br><strong>要求是：方法声明都完全一致，除了访问修饰符不能更低。</strong></li><li>重载：是指一个类中，定义多个名字相同的方法，但是方法的参数不一样，与返回结果无关。</li></ul><h2 id="如何跳出循环-内层循环跳出外层循环" tabindex="-1">如何跳出循环？ 内层循环跳出外层循环 <a class="header-anchor" href="#如何跳出循环-内层循环跳出外层循环" aria-label="Permalink to &quot;如何跳出循环？ 内层循环跳出外层循环&quot;">​</a></h2><ol><li>continue：跳出当前循环，继续下一次循环。</li><li>break：跳出当前循环。</li></ol><p>在内层跳出外层，专业点就加锚点，加标签，其实就是起个名字。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    outter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; ; ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; ; ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outter;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xxx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //111</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //222</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xxx;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    yyy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yyy;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="什么是泛型-泛型的作用" tabindex="-1">什么是泛型，泛型的作用 <a class="header-anchor" href="#什么是泛型-泛型的作用" aria-label="Permalink to &quot;什么是泛型，泛型的作用&quot;">​</a></h2><p>泛型是JDK1.5之后引入的一个新特性，主要是为了解决类型安全问题。 Java中的泛型就是一种规避类型错误的一种安全机制。 当你在声明一个集合并且指定泛型的类型后，你存储的数据类型就会有限制了，存储的不允许的类型，在编译时期就会直接报错了。</p><ul><li>类型的安全，前面可以看出来。</li><li>减少强制类型转换的操作</li></ul><h3 id="泛型的擦除" tabindex="-1">泛型的擦除 <a class="header-anchor" href="#泛型的擦除" aria-label="Permalink to &quot;泛型的擦除&quot;">​</a></h3><p>泛型在编译时期是有的，但是在运行时期是没有的，这个过程就是泛型的擦除。 泛型擦出去是编译器在编译是的一种机制，你编写的Java代码变为class文件后，他就没有泛型这个东西了，底层都是最顶级的Object。所以泛型只是在编写时加上， 其次底层运行时，压根就没泛型这个东西。就比如<code>List&lt;String&gt;</code>运行后，他就是List。</p><ul><li>由于泛型擦除，在运行时无法获取泛型的具体类型信息。在反射的时候获取一些实例需要手动转换类型。</li><li>这意味着某些在编译时允许的操作，在运行时可能会受到限制，例如，无法使用instanceof运算符检查泛型类型。</li><li>虽然泛型在运行时会被擦除，但是编译器会在编译阶段进行类型的检查。</li></ul><h2 id="java类的加载过程及双亲委派" tabindex="-1">java类的加载过程及双亲委派 <a class="header-anchor" href="#java类的加载过程及双亲委派" aria-label="Permalink to &quot;java类的加载过程及双亲委派&quot;">​</a></h2><ol><li><p>类的加载过程</p><ol><li><strong>加载</strong>: 找到字节码文件，加载到JVM内存中的方法区里。 然后在内存中的体现就是一个Class对象。</li><li><strong>验证</strong>：验证加载到内存里的.class文件是否被篡改过，确认没有安全问题，以及符合JVM规范。</li><li><strong>准备</strong>：为类的静态变量分配内存，并将其初始化为默认值。</li><li><strong>解析</strong>: 将常量池中的符号引用替换为直接引用。</li><li><strong>初始化</strong>: 执行类构造器<code>&lt;clinit&gt;()</code>方法，初始化类的静态变量和静态代码块。</li><li><strong>使用</strong>：当new一个对象的时候，就会使用。</li></ol></li><li><p>双亲委派</p></li></ol><ul><li>java中默认的三种类加载器，分别是： <ol><li><strong>Bootstrap ClassLoader</strong>：启动类加载器，负责加载JDK中的核心类库，如<code>rt.jar</code>。</li><li><strong>Extension ClassLoader</strong>：扩展类加载器，负责加载<code>jre/lib/ext</code>目录中的jar包。</li><li><strong>AppClassLoader</strong>：应用程序类加载器，负责加载用户类路径上的类库。</li><li><strong>Custom ClassLoader</strong>：自定义类加载器，可以继承ClassLoader类，实现自己的加载逻辑。</li></ol></li><li>双亲委派的过程 <ol><li>当一个类加载器收到一个类加载请求时，首先会检查这个类是否已经被加载过了，如果已经加载过了，就直接返回这个类，不再加载。</li><li>如果没有加载过，就会将这个请求委派给父类加载器去加载，父类加载器会继续委派给自己的父类加载器，直到委派给Bootstrap ClassLoader。</li><li>如果Bootstrap ClassLoader加载不了，就会返回给子类加载器，子类加载器会尝试自己加载这个类。</li><li>如果子类加载器加载不了，就会抛出<code>ClassNotFoundException</code>异常。</li></ol></li><li>双亲委派解决的问题 <ol><li>避免类的重复加载。</li><li>保护核心类库不被篡改（java.lang.String需要保证唯一，避免被篡改）。</li><li>避免用户自定义的类覆盖核心类库。</li><li>避免用户自定义的类加载器加载核心类库。</li><li>保证核心类库的唯一性。</li></ol></li><li>实践中有那些破坏了双亲委派的类加载器机制 <ul><li>Tomcat的WebAppClassLoader：因为一个tomcat的中可能有多个webapp，每个webapp都有自己的类加载器，所以tomcat的类加载器会破坏双亲委派。</li><li>OSGI的类加载器：OSGI是一个动态模块化的框架，他的类加载器会破坏双亲委派。</li><li>JBoss的类加载器（类似tomcat）：JBoss是一个应用服务器，他的类加载器会破坏双亲委派。</li></ul></li></ul><h2 id="list交集元素" tabindex="-1">List交集元素 <a class="header-anchor" href="#list交集元素" aria-label="Permalink to &quot;List交集元素&quot;">​</a></h2><ol><li><p>使用<code>retainAll</code>方法可以直接 list1.retainAll(list2)，他会将list1中的数据，只保留list1和list2的交集结果。 <strong>内部采用双指针方式</strong></p><ul><li>指针A：初始在0位置，如果有交集元素，赋值，然后向后移动一个位置</li><li>指针B：每次都会往后移动一个位置指向一个元素，同时利用contains判断元素是否存在，存在，在指针A的位置赋值，然后指针A移动，指针B也移动。如果不存在交集情况，A不动，B动。</li></ul></li><li><p>借助hashMap实现，将list1的数据放入hashMap中，然后遍历list2，如果hashMap中存在这个数据，就是交集。</p></li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    List&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; list2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">retainAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="java的封装-继承-多态" tabindex="-1">java的封装，继承，多态 <a class="header-anchor" href="#java的封装-继承-多态" aria-label="Permalink to &quot;java的封装，继承，多态&quot;">​</a></h2><p><strong>封装：</strong> 封装其实非常常见，比如映射数据库表的ORM的实体类，或者是响应给前端数据时，封装一个VO，或者传输对象数据时，也会涉及到DTO之类的内容，这些都是封装的具体体现。而这些类内部都是将 <strong>属性进行私有化</strong> ，不允许直接修改，但是会对外提供 <strong>set、get的公共方法</strong> 去操作，而在方法中就可以直接很多限制，来 **保证数据的安全 ** 。</p><p><strong>继承：</strong> 这个更好办， <strong>继承就是站在巨人的肩膀上</strong> ，可以直接继承一个功能强大的类，直接使用他提供的各种功能。 这个强大的类，可以是前人种树留下来的，也可以是后续基于多个类似的类，向上抽取出来的一个公共的类。 如果对AQS熟悉，可往这方面回答，引导面试官问相关AQS问题 比如JUC包下的AQS，提供了响应的state属性，同步队列以及单向链表来给JUC包下的其他并发工具类来继承。。。。</p><p><strong>多态：</strong> 多态在平时写代码的时候，用的非常之频繁，同一个动作，可以有多种实现，代码最直观的体现，就是使用 **父类接口指向子类的实现 ** 。 比如Controller注入Service，都是声明Service接口，然后基于Spring注入一个实现类。 比如CacheService，是一个提供缓存的功能接口，可以给CacheService提供多种实现，比如MemcacheServiceImpl，比如RedisServiceImpl，再比如CoffeineServiceImpl，提供多种缓存策略的实现，可以基于不同的注入方式，使用不同的缓存实现。</p><h2 id="数组和链表的区别" tabindex="-1">数组和链表的区别 <a class="header-anchor" href="#数组和链表的区别" aria-label="Permalink to &quot;数组和链表的区别&quot;">​</a></h2><p>这个问题，约等于问了ArrayList和LinkedList的区别</p><p>数组和链表核心的区别就三个东西：</p><ul><li><p>查询效率</p><ul><li>数组：可以通过索引直接访问数组上任意位置的元素，时间复杂度直接O1，效率嘎嘎快。</li><li>链表：只能顺序访问，要么从头开始找，要么从尾巴开始找到目标元素，时间复杂度On。</li></ul></li><li><p>增删效率：</p><ul><li>数组：在数组中间插入或者删除元素，会导致需要移动其他元素，这个本身就是一个比较耗时的操作。</li><li>链表：插入和删除操作，只需要更改相邻的两个节点的指针就可以了，其他元素不需要动。</li></ul></li><li><p>内存使用</p><ul><li>数组： 数组申请时，需要一片连续的内存空间，而且要提前指定好长度。或多或少可能会浪费一些空间，而且预计的大小不够，扩容还需要再构建一波新的数组。特别是如果你的JVM中有内存碎片的问题，在申请一个比较长的数组时，可能时间导致执行GC甚至是OOM。</li><li>链表：不需要提前申请很大一片内存空间，但是链表的每个节点需要额外的存储空间来保存指针。链表他不需要扩容。</li></ul></li><li><p>如果你需要快速的随机访问元素，并且可以大致预估出需要的数据个数，那么数组更合适。</p></li><li><p>如果你的业务是频繁的增删数据，很明显，链表更合适。</p></li></ul><p>线程池 -- 阻塞队列 -- ArrayBlockingQueue， LinkedBlockingQueue， 明显链表好，可以往这拐，引导回答线程池相关问题。</p><h2 id="讨论java集合框架的主要接口-如list、set、map-的特点-举例说明在什么场景下使用它们" tabindex="-1">讨论Java集合框架的主要接口（如List、Set、Map）的特点，举例说明在什么场景下使用它们 <a class="header-anchor" href="#讨论java集合框架的主要接口-如list、set、map-的特点-举例说明在什么场景下使用它们" aria-label="Permalink to &quot;讨论Java集合框架的主要接口（如List、Set、Map）的特点，举例说明在什么场景下使用它们&quot;">​</a></h2><p>List：</p><ul><li>特点：List是有序集合（存取有序），允许元素重复，并且可以存储null值。</li><li>适用场景： <ul><li>当你需要维护元素的插入顺序时，比如实现一个队列可以上List</li><li>当你需要遍历整个元素时，可以采用List</li></ul></li><li>扩展：List下有ArrayList，LinkedList，聊数组和链表的问题…………还有一个Vector，这哥们线程安全的，但是用的synchronized，效率不好…………</li></ul><p>Set：</p><ul><li>特点：Set不允许存储重复的元素，也不能保证元素的顺序（存取有序，除了LinkedHashSet），能存储Null，但是只能存一个</li><li>适用场景 <ul><li>当你需要保证元素的唯一性时，比如用户手机号，用户的ID。</li><li>当你需要做去重操作时，Set是一个很好的工具。</li></ul></li><li>扩展：Set本质是基于HashMap的key去实现的。基于哈希表做到的去重效果。但是HashMap线程不安全</li></ul><p>Map：</p><ul><li>Map建议就直接点一嘴，他是双列集合。有key-value结构。底层就是哈希表，结构是数组 + 链表实现的，在JDK1.8之后，优化了一波红黑树来提升HashMap的查询效率</li></ul><h2 id="hashset的底层实现" tabindex="-1">hashSet的底层实现 <a class="header-anchor" href="#hashset的底层实现" aria-label="Permalink to &quot;hashSet的底层实现&quot;">​</a></h2><p>hashSet底层是基于HashMap实现的，HashSet的add方法，实际上是调用了HashMap的put方法，将元素作为key，value是一个固定的Object对象。</p><h2 id="map和set区别" tabindex="-1">Map和Set区别 <a class="header-anchor" href="#map和set区别" aria-label="Permalink to &quot;Map和Set区别&quot;">​</a></h2><p>Map和Set的区别就是Map是键值对的形式，Set是单个元素的形式。</p><h2 id="linkedhashmap怎么保证有序" tabindex="-1">LinkedHashMap怎么保证有序 <a class="header-anchor" href="#linkedhashmap怎么保证有序" aria-label="Permalink to &quot;LinkedHashMap怎么保证有序&quot;">​</a></h2><p>LinkedHashMap是HashMap的子类，他在HashMap的基础上，增加了一个双向链表，用来维护插入元素的顺序。</p><h2 id="使用stream流的坑" tabindex="-1">使用Stream流的坑 <a class="header-anchor" href="#使用stream流的坑" aria-label="Permalink to &quot;使用Stream流的坑&quot;">​</a></h2><p>Stream最出名，<strong>最大的坑，就是他的parallel，并行流。</strong></p><p>用了并行流，将相当于上了线程池，做并行操作，你会天真的以为，性能提升了。</p><p>首先parallel这个东西的核心问题，就是他默认所有的parallel都会用ForkJoinPool的线程池，默认的线程数是CPU内核 - 1（我记得是）。每个parallel任务都用他，如果自己没有主动的根据业务去设置一个参数合理的线程池的话，反而不会提升性能，会让处理速度变低。。。。。</p><p>比如你把大量的IO密集的操作用parallel并行流去玩，结果线程个数没有达到IO密集的要求， 前几个任务还好，后几个任务就需要等待前面的任务完成，才有线程用，反而会让多个请求变成了一个串行处理的套路。效率可能还会下降。</p><p><strong>解决方案，就是必须自己设置一个合理的线程池，建议，及其建议，上ThreadPoolExecutor</strong></p><h2 id="hashmap底层原理" tabindex="-1">HashMap底层原理 <a class="header-anchor" href="#hashmap底层原理" aria-label="Permalink to &quot;HashMap底层原理&quot;">​</a></h2><p><img src="`+e+'" alt="HashMap底层原理"> 总而言之，<strong>JDK1.8</strong>引入红黑树大程度优化了HashMap的性能， 那么对于我们来讲保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。 如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p><p>JDK1.8对HashMap做了很多优化，主要是在解决hash冲突的问题上，引入了红黑树，提高了查询效率。</p><h2 id="hashmap的put流程" tabindex="-1">HashMap的put流程 <a class="header-anchor" href="#hashmap的put流程" aria-label="Permalink to &quot;HashMap的put流程&quot;">​</a></h2><p>key的hash值运算方式。</p><ul><li>HashMap中如果传入的key是null，hash值固定就是0</li><li>如果不为null， <strong>会将key.hashCode的结果，进行高低位的亦或运算，得到一个结果，就是hash值。</strong><ul><li>高低16位的^运算，是为了让hashCode的高16位，也能参与到计算存储位置的运算中，从而减少hash冲突的出现。</li></ul></li></ul><p>数组索引位置的计算。</p><ul><li>基于 <strong>数组长度 - 1 再跟key的hash值做&amp;运算</strong> ，得到要存储的数组索引位置。</li><li>为啥HashMap的长度必须是2的n次方？ <ul><li>如果长度不是2的n次方，会导致在计算索引位置时，hash冲突变多，导致HashMap查询变慢。</li></ul></li></ul><p>写入到数组，链表，红黑树。</p><ul><li>数组：当判断数据要插入的数组索引位置上，没数据，直接扔数组上。</li><li>红黑树：如果发现数组上的数据类型是TreeNode，那就将数据插入到红黑树中。。</li><li>链表：循环找到链表的最后一个位置，挂上。</li><li>修改value：无论存储哪个位置，都会判断hash是否一致，如果一致，再判断 == 或者 eq是否为true，为true覆盖value值。</li></ul><p>计数器</p><ul><li>直接对size属性做++即可，因为是单线程的集合。 如果是覆盖value，不会++。</li></ul><p><strong>如果你对ConcurrentHashMap掌握的好？</strong> ，你就说一嘴，这玩应线程不安全。安全的话吗，要用啥等……</p><h2 id="hashmap的扩容" tabindex="-1">HashMap的扩容 <a class="header-anchor" href="#hashmap的扩容" aria-label="Permalink to &quot;HashMap的扩容&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/92481037" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/92481037</a></p><p>初始化大小为16，扩展因子为0.75（泊松分布）</p><h2 id="threadlocal" tabindex="-1">ThreadLocal <a class="header-anchor" href="#threadlocal" aria-label="Permalink to &quot;ThreadLocal&quot;">​</a></h2><p><strong>ThreadLocal存储数据的方式。</strong></p><p>ThreadLocal本身不存储数据，他只是一个key。</p><p>真正存储数据的，是线程对象Thread当中的一个Map。</p><p>这个Map的底层是一个Entry数组，每一个Entry都可以存储key和value。</p><p>其中的key，就是ThreadLocal。</p><p>可以声明多个ThreadLocal对象，但是存储数据的，就是线程中的内个Entry数组。</p><hr><p><strong>内存泄漏问题。</strong></p><p>ThreadLocal有两个内存泄漏问题</p><p>key的内存泄漏，这个问题已经被解决了，因为ThreadLocal内部对Key的引用是弱引用。</p><p>value的内存泄漏问题，在线程池操作ThreadLocal时，因为线程一致没有被回收，Entry数组他就一直在，前面如果ThreadLocal被回收掉了，但是value还在，导致value占用内存，但是你还查询不到。还有一个安全问题，上次逻辑存储的数据，在下次逻辑里又查询出来了。所以value的内存泄漏问题，需要咱们在使用完毕后，主动的remove，避免下次操作出现问题。</p><h2 id="threadlocal如何实现主子线程之间的数据同步" tabindex="-1">ThreadLocal如何实现主子线程之间的数据同步 <a class="header-anchor" href="#threadlocal如何实现主子线程之间的数据同步" aria-label="Permalink to &quot;ThreadLocal如何实现主子线程之间的数据同步&quot;">​</a></h2><p>用共享变量去实现父子线程之间的数据同步。</p><p>一般面试要聊InheritableThreadLocal，一定是父线程主动的去创建的子线程才可以。</p><p>如果是子线程给父线程传递数据，那就是采用共享编程，或者作为返回值。</p>',89)]))}const g=a(t,[["render",p]]);export{c as __pageData,g as default};
