import{_ as t,c as s,o as e,a3 as r}from"./chunks/framework.Dohe277V.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"database/01.mysql/11.MySQL其他问题.md","filePath":"database/01.mysql/11.MySQL其他问题.md","lastUpdated":1744687278000}'),n={name:"database/01.mysql/11.MySQL其他问题.md"};function o(l,a,p,i,d,h){return e(),s("div",null,a[0]||(a[0]=[r('<h2 id="mysql为什么使用b-树-而不是红黑树-二叉树-hashmap" tabindex="-1">MySQL为什么使用B+树，而不是红黑树，二叉树，hashMap <a class="header-anchor" href="#mysql为什么使用b-树-而不是红黑树-二叉树-hashmap" aria-label="Permalink to &quot;MySQL为什么使用B+树，而不是红黑树，二叉树，hashMap&quot;">​</a></h2><p><strong>B树</strong>：B树是每个索引节点都会有Data域，节点相对较大，增加IO次数，并且叶子节点存放的是地址，无法进行区间访问</p><p><strong>二叉树</strong>: 左边子节点大于右边子节点，<strong>可能会导致树的高度过高导致时间复杂度增加</strong></p><p><strong>红黑树</strong>：树高度不可控制，会存在频繁的IO问题</p><p><strong>HashMap</strong>：需要进行Hash计算，同时不支持范围查找</p><p><strong>B+树</strong>：除了叶子节点外其他节点不存放数据，节点小，IO次数小，且叶子节点中存放的就是data数据，叶子节点还有链指针，可以遍历叶子节点获取全部数据，可以进行区间访问</p><p><a href="https://blog.csdn.net/qq_32555377/article/details/106246586" target="_blank" rel="noreferrer">https://blog.csdn.net/qq_32555377/article/details/106246586</a></p><h2 id="什么是聚簇索引和非聚簇索引" tabindex="-1">什么是聚簇索引和非聚簇索引 <a class="header-anchor" href="#什么是聚簇索引和非聚簇索引" aria-label="Permalink to &quot;什么是聚簇索引和非聚簇索引&quot;">​</a></h2><ul><li>聚簇索引：将数据存储和索引放在一起、并且是按照一定的顺序组织的，找到索引也就找到了数据，数据的物理存放顺序与索引顺序是一致的，即：只要索引是相邻的，那么对应的数据一定也是相邻的存放在磁盘上的。</li><li>非聚簇索引：叶子节点不存储数据，存储的是数据行地址，也就是说根据索引查找到数据行的位置再去磁盘查找数据，这就有点类似一本书的目录，比如要找到第三章第一节，那就现在目录里面查找，找到对应的页码后再去对应的页码看文章。</li></ul><p><strong>InnoDB中一定有主键，主键一定是聚簇索引，不手动设置，则会使用一个unique索引作为主键索引，没有unique索引，则会使用数据库内部的一个隐藏行id来当作主键索引</strong>。在聚簇索引之上创建的索引称为辅助索引，辅助索引访问数据总是需要二次查找，非聚簇索引都是辅助索引，像复合索引，前缀索引、唯一索引。辅助索引叶子节点存储的不再是行的物理位置，而是主键值。</p><p><strong>MyISM使用的是非聚簇索引</strong>，没有聚簇索引。叶子节点存放的是地址信息</p>',11)]))}const m=t(n,[["render",o]]);export{g as __pageData,m as default};
