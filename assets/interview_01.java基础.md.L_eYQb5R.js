import{_ as t,c as i,o as a,a3 as d}from"./chunks/framework.DY6izP8J.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"interview/01.java基础.md","filePath":"interview/01.java基础.md","lastUpdated":1751416672000}'),n={name:"interview/01.java基础.md"};function e(h,s,l,r,p,k){return a(),i("div",null,s[0]||(s[0]=[d(`<h2 id="java基础" tabindex="-1">java基础 <a class="header-anchor" href="#java基础" aria-label="Permalink to &quot;java基础&quot;">​</a></h2><h3 id="java的基本类型" tabindex="-1">java的基本类型 <a class="header-anchor" href="#java的基本类型" aria-label="Permalink to &quot;java的基本类型&quot;">​</a></h3><table><thead><tr><th>类型</th><th>位数</th><th>字节</th><th>默认值</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td><code>byte</code></td><td>8</td><td>1</td><td><code>0</code></td><td>-128</td><td>127</td></tr><tr><td><code>short</code></td><td>16</td><td>2</td><td><code>0</code></td><td>-32,768</td><td>32,767</td></tr><tr><td><code>int</code></td><td>32</td><td>4</td><td><code>0</code></td><td>-2,147,483,648</td><td>2,147,483,647</td></tr><tr><td><code>long</code></td><td>64</td><td>8</td><td><code>0L</code></td><td>-9,223,372,036,854,775,808</td><td>9,223,372,036,854,775,807</td></tr><tr><td><code>float</code></td><td>32</td><td>4</td><td><code>0.0f</code></td><td>~1.4E-45</td><td>~3.4028235E+38</td></tr><tr><td><code>double</code></td><td>64</td><td>8</td><td><code>0.0d</code></td><td>~4.9E-324</td><td>~1.7976931348623157E+308</td></tr><tr><td><code>char</code></td><td>16</td><td>2</td><td><code>\\u0000</code></td><td>0</td><td>65,535</td></tr><tr><td><code>boolean</code></td><td>—</td><td>~1</td><td><code>false</code></td><td><code>false</code></td><td><code>true</code></td></tr></tbody></table><blockquote><p><code>boolean</code> 实际占用内存不明确，由 JVM 实现决定。通常用 1 个字节来存储（虽然理论上 1 bit 足够）。</p><p><code>char</code> 是无符号的，使用 Unicode 编码（UTF-16），值为 <code>\\u0000</code> 到 <code>\\uffff</code>。</p><p>浮点类型遵循 IEEE 754 标准。</p></blockquote><h3 id="重载和重写的区别" tabindex="-1">重载和重写的区别 <a class="header-anchor" href="#重载和重写的区别" aria-label="Permalink to &quot;重载和重写的区别&quot;">​</a></h3><table><thead><tr><th>对比项</th><th>重载（Overload）</th><th>重写（Override）</th></tr></thead><tbody><tr><td>位置</td><td><strong>同一个类中</strong></td><td><strong>子类中覆盖父类的方法</strong></td></tr><tr><td>方法名</td><td>✅ 相同</td><td>✅ 相同</td></tr><tr><td>参数列表</td><td>❗<strong>必须不同</strong>（类型或数量或顺序）</td><td>❗<strong>必须完全一致</strong></td></tr><tr><td>返回类型</td><td>✅ 可以不同（但最好统一）</td><td>✅ 必须相同（JDK 5 之前）或是其子类（协变返回类型）</td></tr><tr><td>访问修饰符</td><td>✅ 没有限制</td><td>✅ 子类方法访问权限必须 ≥ 父类方法</td></tr><tr><td>异常抛出</td><td>✅ 可以不同</td><td>❗子类方法抛出的异常 ≤ 父类（更窄，不能更广）</td></tr><tr><td>静态/非静态</td><td>✅ 都可以重载</td><td>❗只能重写实例方法，<strong>不能</strong>重写 <code>static</code> 方法</td></tr><tr><td>多态性</td><td>❌ 不支持</td><td>✅ 支持运行时多态</td></tr><tr><td>编译时决定</td><td>✅ 编译时根据参数匹配</td><td>❌ 运行时通过对象类型决定</td></tr><tr><td>注解推荐</td><td>不需要注解</td><td>推荐加 <code>@Override</code> 注解</td></tr></tbody></table><h3 id="包装类型的缓存机制" tabindex="-1">包装类型的缓存机制 <a class="header-anchor" href="#包装类型的缓存机制" aria-label="Permalink to &quot;包装类型的缓存机制&quot;">​</a></h3><table><thead><tr><th>类型</th><th>缓存范围</th><th>是否可自定义范围？</th></tr></thead><tbody><tr><td><code>Byte</code></td><td><code>[-128, 127]</code></td><td>❌ 不可自定义</td></tr><tr><td><code>Short</code></td><td><code>[-128, 127]</code></td><td>❌ 不可自定义</td></tr><tr><td><code>Integer</code></td><td><code>[-128, 127]</code>（默认）</td><td>✅ 可通过 JVM 参数</td></tr><tr><td><code>Long</code></td><td><code>[-128, 127]</code></td><td>✅ 可通过 JVM 参数</td></tr><tr><td><code>Character</code></td><td><code>[0, 127]</code>（ASCII）</td><td>❌ 不可自定义</td></tr><tr><td><code>Boolean</code></td><td><code>true/false</code></td><td>不需要缓存，只有两个</td></tr></tbody></table><div class="language-Java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CacheTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Integer a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Integer b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Integer c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Integer d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true ✅ 缓存范围内</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false ❌ 超出范围</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="string-stringbuilder-stringbuffer的区别" tabindex="-1">String，StringBuilder，StringBuffer的区别 <a class="header-anchor" href="#string-stringbuilder-stringbuffer的区别" aria-label="Permalink to &quot;String，StringBuilder，StringBuffer的区别&quot;">​</a></h3><table><thead><tr><th>特性</th><th><code>String</code>（不可变）</th><th><code>StringBuilder</code>（可变，非线程安全）</th><th><code>StringBuffer</code>（可变，线程安全）</th></tr></thead><tbody><tr><td>是否可变</td><td>❌ 不可变</td><td>✅ 可变</td><td>✅ 可变</td></tr><tr><td>线程安全性</td><td>✅ 安全（不可变天生安全）</td><td>❌ 非线程安全</td><td>✅ 线程安全（方法加锁）</td></tr><tr><td>性能（单线程）</td><td>🚫 最差</td><td>✅ 最优</td><td>⏳ 次优</td></tr><tr><td>性能（多线程）</td><td>✅ 安全但慢</td><td>❌ 有并发风险</td><td>✅ 较安全，适合并发</td></tr><tr><td>使用场景</td><td>少量字符串处理，常量操作</td><td>单线程拼接大量字符串</td><td>多线程环境中字符串处理</td></tr><tr><td>实现机制</td><td><code>final char[] value</code></td><td><code>char[] value</code></td><td><code>char[] value</code></td></tr><tr><td>Java 版本</td><td>JDK 1.0</td><td>JDK 1.5+</td><td>JDK 1.0</td></tr></tbody></table><h3 id="和equal-区别" tabindex="-1">==和equal()区别 <a class="header-anchor" href="#和equal-区别" aria-label="Permalink to &quot;==和equal()区别&quot;">​</a></h3><table><thead><tr><th>比较项</th><th><code>==</code></th><th><code>.equals()</code></th></tr></thead><tbody><tr><td>本质</td><td>比较<strong>内存地址（引用是否相同）</strong></td><td>比较<strong>对象的内容是否相同</strong></td></tr><tr><td>适用类型</td><td>基本类型 &amp; 引用类型</td><td>引用类型（如 String、Integer、List 等）</td></tr><tr><td>是否可重写</td><td>❌ 不能</td><td>✅ 可以（<code>Object</code> 提供默认实现，可被重写）</td></tr><tr><td>默认行为</td><td>对于引用类型比较地址（除非重写 <code>.equals()</code>）</td><td>同 <code>==</code>，除非该类自己重写了 <code>.equals()</code> 方法</td></tr><tr><td>常见用途</td><td>基本类型判断、引用比较、是否是同一个对象</td><td>比较值是否一致，比如两个字符串是否内容一样</td></tr></tbody></table><h4 id="基本类型-vs-引用类型" tabindex="-1">基本类型 vs 引用类型 <a class="header-anchor" href="#基本类型-vs-引用类型" aria-label="Permalink to &quot;基本类型 vs 引用类型&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 基本类型比较</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true ✅ 值比较，基本类型</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 引用类型比较</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Integer x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Integer y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false ❌ 地址不同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true ✅ 值相同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="string-对象" tabindex="-1">String 对象 <a class="header-anchor" href="#string-对象" aria-label="Permalink to &quot;String 对象&quot;">​</a></h4><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String s3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s2);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true ✅ 指向常量池同一地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s3);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false ❌ new 出来的地址不同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s3)); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true ✅ 内容一样 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="object类的常见方法" tabindex="-1">Object类的常见方法 <a class="header-anchor" href="#object类的常见方法" aria-label="Permalink to &quot;Object类的常见方法&quot;">​</a></h3><table><thead><tr><th>方法签名</th><th>作用</th><th>是否常被重写</th><th>典型用途</th></tr></thead><tbody><tr><td><code>equals(Object obj)</code></td><td>比较对象“内容”是否相等</td><td>✅ 常重写</td><td>比较逻辑</td></tr><tr><td><code>hashCode()</code></td><td>返回哈希码（用于散列表结构）</td><td>✅ 常重写</td><td><code>HashMap</code>、<code>HashSet</code></td></tr><tr><td><code>toString()</code></td><td>返回对象的字符串表示</td><td>✅ 常重写</td><td>打印调试</td></tr><tr><td><code>getClass()</code></td><td>获取对象的运行时类信息</td><td>❌ 不可重写</td><td>反射</td></tr><tr><td><code>clone()</code></td><td>对象克隆（浅拷贝）</td><td>✅ 有时重写</td><td>对象复制</td></tr><tr><td><code>finalize()</code></td><td>垃圾回收前调用（已废弃）</td><td>❌ 不推荐使用</td><td>GC 清理</td></tr><tr><td><code>wait()</code> / <code>notify()</code> / <code>notifyAll()</code></td><td>多线程通信用（配合 <code>synchronized</code>）</td><td>❌ 不重写</td><td>线程同步</td></tr><tr><td><code>equals()</code> 与 <code>hashCode()</code> 套路</td><td><strong>必须成对重写</strong>，否则集合中表现异常</td><td>✅</td><td>必须同步重写</td></tr><tr><td><code>Object o = new Object();</code></td><td>万物之源</td><td>❌</td><td>父类引用</td></tr></tbody></table>`,19)]))}const E=t(n,[["render",e]]);export{c as __pageData,E as default};
