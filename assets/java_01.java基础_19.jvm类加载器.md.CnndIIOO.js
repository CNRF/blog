import{_ as a,c as i,o as l,a3 as n}from"./chunks/framework.DY6izP8J.js";const t="/blog/assets/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6%E6%B5%81%E7%A8%8B.vcXdudKg.png",e="/blog/assets/%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD.DxspE-M6.png",c=JSON.parse('{"title":"19.jvm类加载器","description":"","frontmatter":{"title":"19.jvm类加载器","tags":["java"],"categories":["java"]},"headers":[],"relativePath":"java/01.java基础/19.jvm类加载器.md","filePath":"java/01.java基础/19.jvm类加载器.md","lastUpdated":1751421719000}'),r={name:"java/01.java基础/19.jvm类加载器.md"};function h(p,s,k,o,d,g){return l(),i("div",null,s[0]||(s[0]=[n('<h2 id="类加载" tabindex="-1">类加载 <a class="header-anchor" href="#类加载" aria-label="Permalink to &quot;类加载&quot;">​</a></h2><h3 id="类加载的描述" tabindex="-1">类加载的描述 <a class="header-anchor" href="#类加载的描述" aria-label="Permalink to &quot;类加载的描述&quot;">​</a></h3><p>当程序要使用某个类时，如果该类还未被加载到内存中，则系统会通过<strong>类的加载</strong>，<strong>类的连接</strong>，<strong>类的初始</strong><strong>化</strong>这三个步骤来对类进行初始化。如果不出现意外情况，JVM将会连续完成这三个步骤，所以有时也把 这三个步骤统称为<strong>类加载或者类初始化</strong>.</p><p><img src="'+t+'" alt="类加载机制流程"></p><ul><li><strong>类的加载</strong><ul><li>就是指将 class文件读入内存，并为之创建一个 java.lang.Class 对象</li><li>任何类被使用时，系统都会为之建立一个 java.lang.Class 对象</li></ul></li><li><strong>类的连接</strong><ul><li>验证阶段：用于检验被加载的类是否有正确的内部结构，并和其他类协调一致</li><li>准备阶段：负责为类的类变量分配内存，并设置默认初始化值</li><li>解析阶段：将类的二进制数据中的符号引用替换为直接引用</li></ul></li><li><strong>类的初始化</strong><ul><li>在该阶段，主要就是对类变量进行初始化 <img src="'+e+`" alt="类的加载"></li></ul></li></ul><h3 id="类的初始化步骤" tabindex="-1">类的初始化步骤 <a class="header-anchor" href="#类的初始化步骤" aria-label="Permalink to &quot;类的初始化步骤&quot;">​</a></h3><ul><li>假如类还未被加载和连接，则程序先加载并连接该类</li><li>假如该类的直接父类还未被初始化，则先初始化其直接父类</li><li>假如类中有初始化语句，则系统依次执行这些初始化语句</li><li>注意：在执行第 2个步骤的时候，<strong>系统对直接父类的初始化步骤也遵循初始化步骤1-3</strong></li></ul><h3 id="创建类的实例的时机" tabindex="-1">创建类的实例的时机 <a class="header-anchor" href="#创建类的实例的时机" aria-label="Permalink to &quot;创建类的实例的时机&quot;">​</a></h3><ol><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的 java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用 java.exe命令来运行某个主类*</li></ol><h2 id="类加载器" tabindex="-1">类加载器 <a class="header-anchor" href="#类加载器" aria-label="Permalink to &quot;类加载器&quot;">​</a></h2><h3 id="类加载器的作用" tabindex="-1">类加载器的作用 <a class="header-anchor" href="#类加载器的作用" aria-label="Permalink to &quot;类加载器的作用&quot;">​</a></h3><p><strong>负责将 .class文件加载到内存中，并为之生成对应的 java.lang.Class 对象</strong>。</p><h3 id="jvm的类三种加载机制-简单说明" tabindex="-1">JVM的类三种加载机制(简单说明) <a class="header-anchor" href="#jvm的类三种加载机制-简单说明" aria-label="Permalink to &quot;JVM的类三种加载机制(简单说明)&quot;">​</a></h3><ul><li><p><strong>全盘负责</strong>：就是当一个类加载器负责加载某个 Class时，该Class所依赖的和引用的其他Class也将由该类加载 器负责载入，除非显示使用另外一个类加载器来载入</p></li><li><p><strong>父类委托</strong>：就是当一个类加载器负责加载某个 Class时，先让父类加载器试图加载该Class，只有在父类加载器 无法加载该类时才尝试从自己的类路径中加载该类</p></li><li><p><strong>缓存机制</strong>：保证所有加载过的 Class都会被缓存，当程序需要使用某个Class对象时，类加载器先从缓存区中搜 索该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class</p><p>对象，存储到缓存区</p></li></ul><h3 id="java中的内置类加载器" tabindex="-1">Java中的内置类加载器 <a class="header-anchor" href="#java中的内置类加载器" aria-label="Permalink to &quot;Java中的内置类加载器&quot;">​</a></h3><ul><li><strong>Bootstrap class loader</strong> ：它是虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li><strong>Platform class loader</strong> ：平台类加载器可以看到所有平台类 ，平台类包括由平台类加载器或其祖先定义的Java SE平台API，其实现类和JDK特定的运行时类</li><li><strong>System class loader</strong> ：它也被称为应用程序类加载器 ，与平台类加载器不同。 系统类加载器通常用于定义应 用程序类路径，模块路径和JDK特定工具上的类</li><li><strong>类加载器的继承关系</strong>： System的父加载器为Platform，而Platform的父加载器为Bootstrap</li></ul><h3 id="classloader-中的两个方法" tabindex="-1">ClassLoader 中的两个方法 <a class="header-anchor" href="#classloader-中的两个方法" aria-label="Permalink to &quot;ClassLoader 中的两个方法&quot;">​</a></h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static ClassLoader getSystemClassLoader()</td><td>返回用于委派的系统类加载器</td></tr><tr><td>ClassLoader getParent()</td><td>返回父类加载器进行委派</td></tr></tbody></table><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassLoaderDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //static ClassLoader getSystemClassLoader()：返回用于委派的系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassLoader c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AppClassLoader</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //ClassLoader getParent()：返回父类加载器进行委派</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassLoader c2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c2); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//PlatformClassLoader</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ClassLoader c3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c3); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,19)]))}const u=a(r,[["render",h]]);export{c as __pageData,u as default};
